diff --git a/.env b/.env
index 0e188f58..c3158c4d 100644
--- a/.env
+++ b/.env
@@ -7,12 +7,14 @@ REACT_APP_ENV=development
 # Development
 REACT_APP_DEV_PRODUCT_SERVICE_URL=http://localhost:8085/api/v1/products
 REACT_APP_DEV_USER_SERVICE_URL=http://localhost:8085/api/v1/users
+REACT_APP_DEV_AUTH_SERVICE_URL=http://localhost:8085/api/v1/auth
 REACT_APP_DEV_WISHLIST_SERVICE_URL=http://localhost:8085/api/v1/wishlist
 REACT_APP_DEV_CART_SERVICE_URL=http://localhost:8085/api/v1/cart
 
 # Production
 REACT_APP_PROD_PRODUCT_SERVICE_URL=https://mankind-product-service.onrender.com/api/v1
 REACT_APP_PROD_USER_SERVICE_URL=https://mankind-user-service.onrender.com/api/v1
+REACT_APP_PROD_AUTH_SERVICE_URL=https://mankind-auth-service.onrender.com/api/v1
 REACT_APP_PROD_WISHLIST_SERVICE_URL=https://mankind-wishlist-service.onrender.com/api/v1
 REACT_APP_PROD_CART_SERVICE_URL=https://mankind-cart-service.onrender.com/api/v1
 
diff --git a/.env.example b/.env.example
index 0e188f58..c3158c4d 100644
--- a/.env.example
+++ b/.env.example
@@ -7,12 +7,14 @@ REACT_APP_ENV=development
 # Development
 REACT_APP_DEV_PRODUCT_SERVICE_URL=http://localhost:8085/api/v1/products
 REACT_APP_DEV_USER_SERVICE_URL=http://localhost:8085/api/v1/users
+REACT_APP_DEV_AUTH_SERVICE_URL=http://localhost:8085/api/v1/auth
 REACT_APP_DEV_WISHLIST_SERVICE_URL=http://localhost:8085/api/v1/wishlist
 REACT_APP_DEV_CART_SERVICE_URL=http://localhost:8085/api/v1/cart
 
 # Production
 REACT_APP_PROD_PRODUCT_SERVICE_URL=https://mankind-product-service.onrender.com/api/v1
 REACT_APP_PROD_USER_SERVICE_URL=https://mankind-user-service.onrender.com/api/v1
+REACT_APP_PROD_AUTH_SERVICE_URL=https://mankind-auth-service.onrender.com/api/v1
 REACT_APP_PROD_WISHLIST_SERVICE_URL=https://mankind-wishlist-service.onrender.com/api/v1
 REACT_APP_PROD_CART_SERVICE_URL=https://mankind-cart-service.onrender.com/api/v1
 
diff --git a/src/App.js b/src/App.js
index d23e2c48..6a52e315 100644
--- a/src/App.js
+++ b/src/App.js
@@ -2,14 +2,16 @@
 import React from 'react';
 import { Provider } from 'react-redux';
 import { store } from './redux/store';
+import AuthProvider from './providers/AuthProvider';
 import './styles/global.css';
 import AppRouter from './routes/AppRouter';
 
 const App = () => {
   return (
     <Provider store={store}>
+      <AuthProvider>
         <AppRouter />
- 
+      </AuthProvider>
     </Provider>
   );
 };
diff --git a/src/api2/client.js b/src/api2/client.js
index 1d7e16c2..94ec9450 100644
--- a/src/api2/client.js
+++ b/src/api2/client.js
@@ -3,7 +3,7 @@ import config from './config';
 
 /**
  * Simple API Client
- * Handles all API requests with retry logic
+ * Handles all API requests with retry logic and authentication
  */
 class ApiClient {
   constructor(serviceName) {
@@ -16,7 +16,57 @@ class ApiClient {
     this.client = this.createClient();
   }
 
-  // Create axios instance with retry logic
+  // Get stored token
+  getAuthToken() {
+    try {
+      return localStorage.getItem('access_token');
+    } catch (error) {
+      console.error('Error reading auth token:', error);
+      return null;
+    }
+  }
+
+  // Get stored refresh token
+  getRefreshToken() {
+    try {
+      return localStorage.getItem('refresh_token');
+    } catch (error) {
+      console.error('Error reading refresh token:', error);
+      return null;
+    }
+  }
+
+  // Save new token
+  saveToken(token) {
+    try {
+      localStorage.setItem('access_token', token);
+    } catch (error) {
+      console.error('Error saving auth token:', error);
+    }
+  }
+
+  // Save tokens from login response
+  saveTokens(accessToken, refreshToken) {
+    try {
+      localStorage.setItem('access_token', accessToken);
+      localStorage.setItem('refresh_token', refreshToken);
+    } catch (error) {
+      console.error('Error saving tokens:', error);
+    }
+  }
+
+  // Clear all tokens
+  clearTokens() {
+    try {
+      localStorage.removeItem('access_token');
+      localStorage.removeItem('refresh_token');
+      localStorage.removeItem('user');
+    } catch (error) {
+      console.error('Error clearing tokens:', error);
+    }
+  }
+
+  // Create axios instance with retry logic and auth
   createClient() {
     const client = axios.create({
       baseURL: this.baseURL,
@@ -28,50 +78,103 @@ class ApiClient {
 
     // Add request interceptor
     client.interceptors.request.use(
-      (config) => {
-        return config;
+      (requestConfig) => {
+        // Initialize retry count if not present
+        if (requestConfig._retryCount === undefined) {
+          requestConfig._retryCount = 0;
+        }
+
+        // Add auth token if available
+        const token = this.getAuthToken();
+        const hasAuth = !!token;
+        
+        if (hasAuth) {
+          requestConfig.headers.Authorization = `Bearer ${token}`;
+        }
+        
+        if (config.settings?.enableLogging) {
+          console.log(`[${this.serviceName}] Request:`, {
+            method: requestConfig.method?.toUpperCase(),
+            url: requestConfig.url,
+            hasAuth: hasAuth,
+            retryCount: requestConfig._retryCount
+          });
+        }
+        
+        return requestConfig;
       },
       (error) => {
-        if (config.settings.enableLogging) {
+        if (config.settings?.enableLogging) {
           console.error(`[${this.serviceName}] Request Error:`, error);
         }
         return Promise.reject(error);
       }
     );
 
-    // Add response interceptor with retry logic
+    // Add response interceptor with retry logic and token refresh
     client.interceptors.response.use(
       (response) => {
-        if (config.settings.enableLogging) {
-          console.log(`[${this.serviceName}] Response:`, response.status, response.data);
+        if (config.settings?.enableLogging) {
+          console.log(`[${this.serviceName}] Response:`, {
+            status: response.status,
+            url: response.config.url,
+            hasAuth: !!response.config.headers.Authorization
+          });
         }
         return response;
       },
       async (error) => {
         const originalRequest = error.config;
 
-        // Only retry on network errors or timeout
+        // Safety check for originalRequest
+        if (!originalRequest) {
+          return Promise.reject(error);
+        }
+
+        // Initialize retry count if not present
+        if (originalRequest._retryCount === undefined) {
+          originalRequest._retryCount = 0;
+        }
+
+        // Handle 401 errors by redirecting to login
+        if (error.response?.status === 401) {
+          if (config.settings?.enableLogging) {
+            console.log(`[${this.serviceName}] Authentication failed, redirecting to login`);
+          }
+          
+          // Clear tokens
+          this.clearTokens();
+          
+          // Only redirect to login for auth-related requests, not for all services
+          if (this.serviceName === 'auth' || this.serviceName === 'user') {
+            window.location.href = '/login';
+          }
+          
+          return Promise.reject(error);
+        }
+
+        // Only retry on network errors or timeout (not auth errors)
         const shouldRetry = (error.code === 'ECONNABORTED' || error.code === 'ERR_NETWORK') && 
           !originalRequest._retry && 
-          originalRequest._retryCount < config.settings.retryAttempts;
+          (originalRequest._retryCount || 0) < (config.settings?.retryAttempts || 3);
 
         if (shouldRetry) {
           originalRequest._retry = true;
           originalRequest._retryCount = (originalRequest._retryCount || 0) + 1;
 
-          if (config.settings.enableLogging) {
-            console.log(`[${this.serviceName}] Retrying request (${originalRequest._retryCount}/${config.settings.retryAttempts}):`, originalRequest.url);
+          if (config.settings?.enableLogging) {
+            console.log(`[${this.serviceName}] Retrying request (${originalRequest._retryCount}/${config.settings?.retryAttempts || 3}):`, originalRequest.url);
           }
 
           // Wait before retrying
-          await new Promise(resolve => setTimeout(resolve, config.settings.retryDelay));
+          await new Promise(resolve => setTimeout(resolve, config.settings?.retryDelay || 1000));
 
           // Reset retry flag for next attempt
           originalRequest._retry = false;
           return client(originalRequest);
         }
 
-        if (config.settings.enableLogging) {
+        if (config.settings?.enableLogging) {
           console.error(`[${this.serviceName}] Response Error:`, {
             status: error.response?.status,
             message: error.message,
@@ -79,20 +182,35 @@ class ApiClient {
             code: error.code,
             url: error.config?.url,
             method: error.config?.method?.toUpperCase(),
-            retryCount: originalRequest._retryCount || 0
+            retryCount: originalRequest._retryCount || 0,
+            hasAuth: !!error.config?.headers?.Authorization
           });
         }
 
         // Handle common errors
         if (error.response) {
+          // Log the full error response for debugging
+          if (config.settings?.enableLogging) {
+            console.log(`[${this.serviceName}] Full error response:`, {
+              status: error.response.status,
+              statusText: error.response.statusText,
+              data: error.response.data,
+              headers: error.response.headers
+            });
+          }
+          
           // Use server error message if available
           if (error.response.data?.message) {
             error.message = error.response.data.message;
+          } else if (error.response.data?.error) {
+            error.message = error.response.data.error;
+          } else if (typeof error.response.data === 'string') {
+            error.message = error.response.data;
           } else {
             // Fallback to generic messages
             switch (error.response.status) {
               case 401:
-                window.location.href = '/login';
+                // Don't redirect here as we handle it in the interceptor
                 error.message = 'Authentication required. Please log in again.';
                 break;
               case 403:
@@ -115,7 +233,7 @@ class ApiClient {
             }
           }
         } else if (error.code === 'ECONNABORTED') {
-          error.message = `Request to ${error.config?.url} timed out after ${config.settings.timeout}ms. Please try again.`;
+          error.message = `Request to ${error.config?.url} timed out after ${config.settings?.timeout || 10000}ms. Please try again.`;
         } else if (error.code === 'ERR_NETWORK') {
           if (error.message.includes('CORS')) {
             error.message = `Cannot connect to ${this.serviceName} service. CORS error: The service is not accessible from this origin.`;
@@ -135,7 +253,7 @@ class ApiClient {
     return client;
   }
 
-  // HTTP Methods with retry count tracking
+  // HTTP Methods with proper retry count handling
   async get(url, params = {}) {
     const config = { 
       params, 
@@ -186,8 +304,9 @@ class ApiClient {
 
 // Create and export service clients
 export const api = {
-  product: new ApiClient('product'),
+  auth: new ApiClient('auth'),
   user: new ApiClient('user'),
+  product: new ApiClient('product'),
   cart: new ApiClient('cart'),
   wishlist: new ApiClient('wishlist'),
 };
diff --git a/src/api2/config.js b/src/api2/config.js
index 88be8364..e3a77086 100644
--- a/src/api2/config.js
+++ b/src/api2/config.js
@@ -10,7 +10,8 @@ const IS_DEV = ENV === 'development';
 // Get service URL based on environment
 const getServiceUrl = (service) => {
   const prefix = IS_DEV ? 'DEV' : 'PROD';
-  const url = process.env[`REACT_APP_${prefix}_${service.toUpperCase()}_SERVICE_URL`];
+  const envVarName = `REACT_APP_${prefix}_${service.toUpperCase()}_SERVICE_URL`;
+  const url = process.env[envVarName];
   
   if (!url && IS_DEV) {
     console.warn(`Missing ${service} service URL for ${prefix} environment`);
@@ -21,8 +22,9 @@ const getServiceUrl = (service) => {
 
 // Service URLs
 export const services = {
-  product: getServiceUrl('product'),
+  auth: getServiceUrl('auth'),
   user: getServiceUrl('user'),
+  product: getServiceUrl('product'),
   cart: getServiceUrl('cart'),
   wishlist: getServiceUrl('wishlist'),
 };
diff --git a/src/features/admin/AdminPage.jsx b/src/features/admin/AdminPage.jsx
index fbcbb0b2..c4e169da 100644
--- a/src/features/admin/AdminPage.jsx
+++ b/src/features/admin/AdminPage.jsx
@@ -1,42 +1,45 @@
 import React, { useState } from 'react';
-import { Container, Typography, Box, Paper, Tabs, Tab } from '@mui/material';
-import ProductManagement from './ProductManagement';
-import UserManagement from './UserManagement';
-import SalesAnalytics from './SalesAnalytics';
+import { useSelector } from 'react-redux';
+import { selectUser } from '../../redux/slices/userSlice';
+import ProductManagement from './ProductManagement.jsx';
+import UserManagement from './UserManagement.jsx';
+import SalesAnalytics from './SalesAnalytics.jsx';
 import withLayout from '../../layouts/HOC/withLayout';
+import './AdminPage.css';
 
 const AdminPage = () => {
-  const [selectedTab, setSelectedTab] = useState(0);
+  const user = useSelector(selectUser);
+  const [activeTab, setActiveTab] = useState('products');
 
-  const handleTabChange = (event, newValue) => {
-    setSelectedTab(newValue);
-  };
+  const tabs = [
+    { id: 'products', label: 'Product Management', component: <ProductManagement /> },
+    { id: 'users', label: 'User Management', component: <UserManagement /> },
+    { id: 'analytics', label: 'Sales Analytics', component: <SalesAnalytics /> }
+  ];
 
   return (
-    <Container maxWidth="xl">
-      <Box sx={{ py: 4 }}>
-        <Typography variant="h4" component="h1" gutterBottom>
-          Admin Dashboard
-        </Typography>
+    <div className="admin-page">
+      <div className="admin-header">
+        <h1>Admin Dashboard</h1>
+        <p>Welcome back, {user?.firstName || 'Admin'}!</p>
+      </div>
 
-        <Paper sx={{ width: '100%', mb: 2 }}>
-          <Tabs
-            value={selectedTab}
-            onChange={handleTabChange}
-            indicatorColor="primary"
-            textColor="primary"
+      <div className="admin-tabs">
+        {tabs.map((tab) => (
+          <button
+            key={tab.id}
+            className={`tab-button ${activeTab === tab.id ? 'active' : ''}`}
+            onClick={() => setActiveTab(tab.id)}
           >
-            <Tab label="Products" />
-            <Tab label="Users" />
-            <Tab label="Sales Analytics" />
-          </Tabs>
-        </Paper>
+            {tab.label}
+          </button>
+        ))}
+      </div>
 
-        {selectedTab === 0 && <ProductManagement />}
-        {selectedTab === 1 && <UserManagement />}
-        {selectedTab === 2 && <SalesAnalytics />}
-      </Box>
-    </Container>
+      <div className="admin-content">
+        {tabs.find(tab => tab.id === activeTab)?.component}
+      </div>
+    </div>
   );
 };
 
diff --git a/src/features/auth/ProtectedRoute.jsx b/src/features/auth/ProtectedRoute.jsx
deleted file mode 100644
index e69de29b..00000000
diff --git a/src/features/auth/login.jsx b/src/features/auth/login.jsx
index 462d465a..8057ffd1 100644
--- a/src/features/auth/login.jsx
+++ b/src/features/auth/login.jsx
@@ -1,41 +1,99 @@
-import React, { useState } from 'react';
+import React, { useState, useEffect } from 'react';
+import { useNavigate, useLocation } from 'react-router-dom';
+import { Visibility, VisibilityOff } from '@mui/icons-material';
+import useUser from '../../hooks/useUser';
 import './loginForm.css';
 
-const Login = ({ onLogin }) => {
-  const [email, setEmail] = useState('');
-  const [password, setPassword] = useState('');
-  const [emailError, setEmailError] = useState('');
-  const [passwordError, setPasswordError] = useState('');
-  const [formMessage, setFormMessage] = useState('');
-  const [submitted, setSubmitted] = useState(false);
+const Login = () => {
+  const navigate = useNavigate();
+  const location = useLocation();
+  const { login, loading, error, isAuthenticated, clearError } = useUser();
+  
+  const [formData, setFormData] = useState({
+    username: '',
+    password: ''
+  });
+  const [validationErrors, setValidationErrors] = useState({});
+  const [rememberMe, setRememberMe] = useState(false);
+  const [showPassword, setShowPassword] = useState(false);
 
-  const validateEmail = (email) =>
-    /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
+  // Redirect if already authenticated
+  useEffect(() => {
+    if (isAuthenticated) {
+      navigate('/');
+    }
+  }, [isAuthenticated, navigate]);
 
-  const handleSubmit = (e) => {
-    e.preventDefault();
-    setSubmitted(true);
+  // Clear error when component mounts
+  useEffect(() => {
+    clearError();
+  }, [clearError]);
+
+  const validateForm = () => {
+    const errors = {};
+
+    if (!formData.username.trim()) {
+      errors.username = 'Username is required';
+    }
+
+    if (!formData.password) {
+      errors.password = 'Password is required';
+    } else if (formData.password.length < 6) {
+      errors.password = 'Password must be at least 6 characters';
+    }
 
-    setEmailError('');
-    setPasswordError('');
-    setFormMessage('');
-    let valid = true;
+    setValidationErrors(errors);
+    return Object.keys(errors).length === 0;
+  };
+
+  const handleInputChange = (e) => {
+    const { name, value } = e.target;
+    setFormData(prev => ({
+      ...prev,
+      [name]: value
+    }));
 
-    if (!validateEmail(email)) {
-      setEmailError('Please enter a valid email address.');
-      valid = false;
+    // Clear validation error when user starts typing
+    if (validationErrors[name]) {
+      setValidationErrors(prev => ({
+        ...prev,
+        [name]: ''
+      }));
     }
-    if (password.length < 6) {
-      setPasswordError('Password must be at least 6 characters.');
-      valid = false;
+  };
+
+  const handleSubmit = async (e) => {
+    e.preventDefault();
+    
+    if (!validateForm()) {
+      return;
     }
 
-    if (valid) {
-      setFormMessage('Login successful!');
-      if (onLogin) onLogin();
+    try {
+      await login({
+        username: formData.username,
+        password: formData.password
+      });
+      
+      // If login is successful, navigate to home or intended page
+      navigate('/');
+    } catch (err) {
+      // Error is handled by the Redux slice and displayed via the error state
+      console.error('Login failed:', err);
     }
   };
 
+  const handleForgotPassword = () => {
+    // TODO: Implement forgot password functionality
+    console.log('Forgot password clicked');
+  };
+
+  const handleSignUp = () => {
+    navigate('/signup');
+  };
+
+
+
   return (
     <div className="login-page">
       <div className="login-wrapper">
@@ -45,40 +103,98 @@ const Login = ({ onLogin }) => {
           <form className="login-form" onSubmit={handleSubmit}>
             <h2>Sign in</h2>
 
-            {formMessage && <div className="form-success">{formMessage}</div>}
-
-            <label>Email</label>
-            <input
-              type="email"
-              placeholder="Email"
-              value={email}
-              onChange={(e) => setEmail(e.target.value)}
-            />
-            {submitted && emailError && <div className="field-error">{emailError}</div>}
-
-            <label>Password</label>
-            <input
-              type="password"
-              placeholder="Password"
-              value={password}
-              onChange={(e) => setPassword(e.target.value)}
-            />
-            {submitted && passwordError && <div className="field-error">{passwordError}</div>}
+            {location.state?.message && (
+              <div className="form-success">
+                {location.state.message}
+              </div>
+            )}
+
+            <div className="form-group">
+              <label>Username</label>
+              <input
+                type="text"
+                name="username"
+                placeholder="Enter your username"
+                value={formData.username}
+                onChange={handleInputChange}
+                disabled={loading.login}
+              />
+              {validationErrors.username && (
+                <div className="field-error">{validationErrors.username}</div>
+              )}
+            </div>
+
+            <div className="form-group">
+              <label>Password</label>
+              <div className="password-input-container">
+                <input
+                  type={showPassword ? "text" : "password"}
+                  name="password"
+                  placeholder="Enter your password"
+                  value={formData.password}
+                  onChange={handleInputChange}
+                  disabled={loading.login}
+                />
+                <button
+                  type="button"
+                  className="password-toggle"
+                  onClick={() => setShowPassword(!showPassword)}
+                  disabled={loading.login}
+                >
+                  {showPassword ? <VisibilityOff /> : <Visibility />}
+                </button>
+              </div>
+              {validationErrors.password && (
+                <div className="field-error">{validationErrors.password}</div>
+              )}
+            </div>
 
             <div className="form-options">
               <label>
-                <input type="checkbox" /> Remember me
+                <input 
+                  type="checkbox" 
+                  checked={rememberMe}
+                  onChange={(e) => setRememberMe(e.target.checked)}
+                /> 
+                Remember me
               </label>
               <div className="forgot">
-                <button type="button" className="link-button">Forgot password?</button>
+                <button 
+                  type="button" 
+                  className="link-button"
+                  onClick={handleForgotPassword}
+                >
+                  Forgot password?
+                </button>
               </div>
             </div>
 
-            <button type="submit">Sign in →</button>
+            <button 
+              type="submit" 
+              disabled={loading.login}
+              className={loading.login ? 'loading' : ''}
+            >
+              {loading.login ? 'Signing in...' : 'Sign in →'}
+            </button>
+
+            {error && (
+              <div className="form-error">
+                {error}
+              </div>
+            )}
 
             <p className="signup-link">
-              No account? <button type="button" className="link-button">Sign up</button>
+              No account?{' '}
+              <button 
+                type="button" 
+                className="link-button"
+                onClick={handleSignUp}
+              >
+                Sign up
+              </button>
             </p>
+
+
           </form>
         </div>
       </div>
diff --git a/src/features/auth/loginForm.css b/src/features/auth/loginForm.css
index 355f70c7..2fe20c3c 100644
--- a/src/features/auth/loginForm.css
+++ b/src/features/auth/loginForm.css
@@ -26,7 +26,6 @@
   text-align: center;
 }
 
-
 .icon {
   font-size: 28px;
   background: #f0f4f8;
@@ -51,47 +50,61 @@
   margin: 0 auto 20px;
 }
 
-.login-wrapper form {
+.login-form {
   display: flex;
   flex-direction: column;
   gap: 14px;
   margin-top: 12px;
-  width: 320px;
-}
-
-.login-wrapper form p {
-  color: #666;
-  font-size: 15px;
-  margin-bottom: 20px;
+  width: 100%;
+  max-width: 320px;
+  margin-left: auto;
+  margin-right: auto;
 }
 
-.login-wrapper form h2 {
+.login-form h2 {
   font-size: 24px;
   font-weight: 700;
   margin-bottom: 6px;
+  color: #333;
 }
 
-.login-wrapper form label {
+.login-form label {
   font-weight: 500;
   font-size: 14px;
   text-align: start;
+  color: #333;
+  margin-bottom: 6px;
+  display: block;
 }
 
-.login-wrapper form input[type="email"],
-.login-wrapper form input[type="password"] {
+.login-form input[type="text"],
+.login-form input[type="email"],
+.login-form input[type="password"] {
   background-color: #f6f7f9;
-  border: none;
+  border: 2px solid transparent;
   border-radius: 14px;
   padding: 14px 16px;
   font-size: 16px;
   height: 52px;
   box-shadow: 0 1px 3px rgba(0,0,0,0.06);
+  transition: all 0.3s ease;
+  width: 100%;
+  box-sizing: border-box;
 }
 
-.login-wrapper form input:focus {
+.login-form input[type="text"]:focus,
+.login-form input[type="email"]:focus,
+.login-form input[type="password"]:focus {
   border-color: #2563eb;
-  background-color: #ededed;
+  background-color: #ffffff;
   outline: none;
+  box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
+}
+
+.login-form input:disabled {
+  background-color: #f5f5f5;
+  color: #999;
+  cursor: not-allowed;
 }
 
 .field-error {
@@ -100,6 +113,18 @@
   margin-top: 2px;
   margin-bottom: 8px;
   text-align: left;
+  font-weight: 500;
+}
+
+.form-error {
+  background-color: #fef2f2;
+  color: #dc2626;
+  border: 1px solid #fecaca;
+  padding: 12px 16px;
+  margin-bottom: 16px;
+  border-radius: 8px;
+  font-size: 14px;
+  text-align: left;
 }
 
 .form-success {
@@ -120,6 +145,26 @@
   align-items: center;
   margin-top: -4px;
   margin-bottom: 8px;
+  flex-wrap: wrap;
+  gap: 8px;
+}
+
+.form-options label {
+  display: flex;
+  align-items: center;
+  gap: 8px;
+  font-size: 13px;
+  color: #666;
+  cursor: pointer;
+  margin: 0;
+}
+
+.form-options input[type="checkbox"] {
+  width: 16px;
+  height: 16px;
+  accent-color: #2563eb;
+  cursor: pointer;
+  margin: 0;
 }
 
 .forgot a {
@@ -127,7 +172,7 @@
   color: #2563eb;
 }
 
-.login-wrapper form button[type="submit"] {
+.login-form button[type="submit"] {
   padding: 16px;
   font-size: 16px;
   background: linear-gradient(to bottom, #000000, #222222);
@@ -139,16 +184,27 @@
   cursor: pointer;
   width: 100%;
   margin-top: 10px;
+  transition: all 0.3s ease;
 }
 
-.login-wrapper form button[type="submit"]:hover {
+.login-form button[type="submit"]:hover:not(:disabled) {
   background: linear-gradient(to right, #222, #444);
+  transform: translateY(-1px);
+  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
+}
+
+.login-form button[type="submit"]:disabled {
+  background: #ccc;
+  cursor: not-allowed;
+  transform: none;
+  box-shadow: none;
 }
 
 .signup-link {
   text-align: center;
-  font-size: 12px;
-  margin-top: 10px;
+  font-size: 14px;
+  margin-top: 16px;
+  color: #666;
 }
 
 .signup-link a {
@@ -164,10 +220,190 @@
   font-size: inherit;
   padding: 0;
   text-decoration: none;
+  transition: color 0.3s ease;
 }
 
 .link-button:hover {
   text-decoration: underline;
+  color: #1d4ed8;
+}
+
+/* Form row for side-by-side inputs */
+.form-row {
+  display: flex;
+  gap: 15px;
+  margin-bottom: 20px;
+}
+
+.form-group {
+  flex: 1;
+}
+
+.form-group label {
+  display: block;
+  margin-bottom: 8px;
+  font-weight: 500;
+  color: #333;
+  font-size: 14px;
+}
+
+.form-group input {
+  width: 100%;
+  padding: 14px 16px;
+  border: 2px solid transparent;
+  border-radius: 14px;
+  font-size: 16px;
+  transition: all 0.3s ease;
+  background-color: #f6f7f9;
+  height: 52px;
+  box-shadow: 0 1px 3px rgba(0,0,0,0.06);
+  box-sizing: border-box;
+}
+
+.form-group input:focus {
+  border-color: #2563eb;
+  background-color: #ffffff;
+  outline: none;
+  box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
+}
+
+.form-group input:disabled {
+  background-color: #f5f5f5;
+  color: #999;
+  cursor: not-allowed;
+}
+
+/* Password input container */
+.password-input-container {
+  position: relative;
+  display: flex;
+  align-items: center;
+}
+
+.password-input-container input {
+  padding-right: 50px;
+}
+
+.password-toggle {
+  position: absolute;
+  right: 12px;
+  top: 50%;
+  transform: translateY(-50%);
+  background: none;
+  border: none;
+  cursor: pointer;
+  padding: 4px;
+  border-radius: 4px;
+  transition: background-color 0.2s ease;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  width: 32px;
+  height: 32px;
+  color: #666;
+}
+
+.password-toggle:hover {
+  background-color: rgba(0, 0, 0, 0.05);
+  color: #333;
+}
+
+.password-toggle:disabled {
+  cursor: not-allowed;
+  opacity: 0.5;
+}
+
+.password-toggle svg {
+  width: 20px;
+  height: 20px;
+}
+
+/* Loading state for buttons */
+button.loading {
+  position: relative;
+  color: transparent;
+}
+
+button.loading::after {
+  content: '';
+  position: absolute;
+  top: 50%;
+  left: 50%;
+  width: 20px;
+  height: 20px;
+  margin: -10px 0 0 -10px;
+  border: 2px solid transparent;
+  border-top: 2px solid #ffffff;
+  border-radius: 50%;
+  animation: spin 1s linear infinite;
+}
+
+@keyframes spin {
+  0% { transform: rotate(0deg); }
+  100% { transform: rotate(360deg); }
+}
+
+.loading-container {
+  display: flex;
+  justify-content: center;
+  align-items: center;
+  padding: 20px;
+}
+
+.loading-spinner {
+  width: 40px;
+  height: 40px;
+  border: 4px solid #f3f3f3;
+  border-top: 4px solid #2563eb;
+  border-radius: 50%;
+  animation: spin 1s linear infinite;
+}
+
+/* Responsive design */
+@media (max-width: 768px) {
+  .form-row {
+    flex-direction: column;
+    gap: 0;
+  }
+
+  .form-group {
+    margin-bottom: 16px;
+  }
+
+  .login-card {
+    padding: 40px 24px;
+    margin: 20px;
+  }
+
+  .login-form {
+    max-width: 100%;
+  }
+
+  .form-options {
+    flex-direction: column;
+    align-items: flex-start;
+    gap: 12px;
+  }
+}
+
+@media (max-width: 480px) {
+  .login-card {
+    padding: 32px 20px;
+    border-radius: 24px;
+  }
+
+  .login-form h2 {
+    font-size: 20px;
+  }
+
+  .login-form input[type="text"],
+  .login-form input[type="email"],
+  .login-form input[type="password"],
+  .form-group input {
+    height: 48px;
+    padding: 12px 14px;
+    font-size: 15px;
+  }
 }
 
   
\ No newline at end of file
diff --git a/src/features/auth/signup.jsx b/src/features/auth/signup.jsx
index e69de29b..7b2fced5 100644
--- a/src/features/auth/signup.jsx
+++ b/src/features/auth/signup.jsx
@@ -0,0 +1,313 @@
+import React, { useState, useEffect } from 'react';
+import { useNavigate } from 'react-router-dom';
+import { Visibility, VisibilityOff } from '@mui/icons-material';
+import useUser from '../../hooks/useUser';
+import './loginForm.css';
+
+const Signup = () => {
+  const navigate = useNavigate();
+  const { register, loading, error, isAuthenticated, clearError } = useUser();
+  
+  const [formData, setFormData] = useState({
+    username: '',
+    firstName: '',
+    lastName: '',
+    email: '',
+    password: '',
+    confirmPassword: ''
+  });
+  const [validationErrors, setValidationErrors] = useState({});
+  const [agreedToTerms, setAgreedToTerms] = useState(false);
+  const [showPassword, setShowPassword] = useState(false);
+  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
+
+  // Redirect if already authenticated
+  useEffect(() => {
+    if (isAuthenticated) {
+      navigate('/');
+    }
+  }, [isAuthenticated, navigate]);
+
+  // Clear error when component mounts
+  useEffect(() => {
+    clearError();
+  }, [clearError]);
+
+  const validateForm = () => {
+    const errors = {};
+
+    // Username validation
+    if (!formData.username.trim()) {
+      errors.username = 'Username is required';
+    } else if (formData.username.length < 3) {
+      errors.username = 'Username must be at least 3 characters';
+    } else if (!/^[a-zA-Z0-9_.]+$/.test(formData.username)) {
+      errors.username = 'Username can only contain letters, numbers, underscores, and dots';
+    }
+
+    // First name validation
+    if (!formData.firstName.trim()) {
+      errors.firstName = 'First name is required';
+    } else if (formData.firstName.length < 2) {
+      errors.firstName = 'First name must be at least 2 characters';
+    }
+
+    // Last name validation
+    if (!formData.lastName.trim()) {
+      errors.lastName = 'Last name is required';
+    } else if (formData.lastName.length < 2) {
+      errors.lastName = 'Last name must be at least 2 characters';
+    }
+
+    // Email validation
+    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
+    if (!formData.email.trim()) {
+      errors.email = 'Email is required';
+    } else if (!emailRegex.test(formData.email)) {
+      errors.email = 'Please enter a valid email address';
+    }
+
+    // Password validation
+    if (!formData.password) {
+      errors.password = 'Password is required';
+    } else if (formData.password.length < 8) {
+      errors.password = 'Password must be at least 8 characters';
+    } else if (!/(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/.test(formData.password)) {
+      errors.password = 'Password must contain at least one uppercase letter, one lowercase letter, and one number';
+    }
+
+    // Confirm password validation
+    if (!formData.confirmPassword) {
+      errors.confirmPassword = 'Please confirm your password';
+    } else if (formData.password !== formData.confirmPassword) {
+      errors.confirmPassword = 'Passwords do not match';
+    }
+
+    // Terms agreement validation
+    if (!agreedToTerms) {
+      errors.terms = 'You must agree to the terms and conditions';
+    }
+
+    setValidationErrors(errors);
+    return Object.keys(errors).length === 0;
+  };
+
+  const handleInputChange = (e) => {
+    const { name, value } = e.target;
+    setFormData(prev => ({
+      ...prev,
+      [name]: value
+    }));
+
+    // Clear validation error when user starts typing
+    if (validationErrors[name]) {
+      setValidationErrors(prev => ({
+        ...prev,
+        [name]: ''
+      }));
+    }
+  };
+
+  const handleSubmit = async (e) => {
+    e.preventDefault();
+    
+    if (!validateForm()) {
+      return;
+    }
+
+    try {
+      await register({
+        username: formData.username,
+        firstName: formData.firstName,
+        lastName: formData.lastName,
+        email: formData.email,
+        password: formData.password,
+        customAttributes: {}
+      });
+      
+      // If registration is successful, redirect to login
+      navigate('/login', { 
+        state: { 
+          message: 'Registration successful! Please log in with your credentials.' 
+        } 
+      });
+    } catch (err) {
+      // Error is handled by the Redux slice and displayed via the error state
+      console.error('Registration failed:', err);
+    }
+  };
+
+  const handleLogin = () => {
+    navigate('/login');
+  };
+
+  return (
+    <div className="login-page">
+      <div className="login-wrapper">
+        <div className="login-card">
+          <div className="icon">👤</div>
+
+          <form className="login-form" onSubmit={handleSubmit}>
+            <h2>Create Account</h2>
+
+            <div className="form-row">
+              <div className="form-group">
+                <label>First Name</label>
+                <input
+                  type="text"
+                  name="firstName"
+                  placeholder="Enter your first name"
+                  value={formData.firstName}
+                  onChange={handleInputChange}
+                  disabled={loading.register}
+                />
+                {validationErrors.firstName && (
+                  <div className="field-error">{validationErrors.firstName}</div>
+                )}
+              </div>
+
+              <div className="form-group">
+                <label>Last Name</label>
+                <input
+                  type="text"
+                  name="lastName"
+                  placeholder="Enter your last name"
+                  value={formData.lastName}
+                  onChange={handleInputChange}
+                  disabled={loading.register}
+                />
+                {validationErrors.lastName && (
+                  <div className="field-error">{validationErrors.lastName}</div>
+                )}
+              </div>
+            </div>
+
+            <div className="form-group">
+              <label>Username</label>
+              <input
+                type="text"
+                name="username"
+                placeholder="Choose a username"
+                value={formData.username}
+                onChange={handleInputChange}
+                disabled={loading.register}
+              />
+              {validationErrors.username && (
+                <div className="field-error">{validationErrors.username}</div>
+              )}
+            </div>
+
+            <div className="form-group">
+              <label>Email</label>
+              <input
+                type="email"
+                name="email"
+                placeholder="Enter your email"
+                value={formData.email}
+                onChange={handleInputChange}
+                disabled={loading.register}
+              />
+              {validationErrors.email && (
+                <div className="field-error">{validationErrors.email}</div>
+              )}
+            </div>
+
+            <div className="form-group">
+              <label>Password</label>
+              <div className="password-input-container">
+                <input
+                  type={showPassword ? "text" : "password"}
+                  name="password"
+                  placeholder="Create a password"
+                  value={formData.password}
+                  onChange={handleInputChange}
+                  disabled={loading.register}
+                />
+                <button
+                  type="button"
+                  className="password-toggle"
+                  onClick={() => setShowPassword(!showPassword)}
+                  disabled={loading.register}
+                >
+                  {showPassword ? <VisibilityOff /> : <Visibility />}
+                </button>
+              </div>
+              {validationErrors.password && (
+                <div className="field-error">{validationErrors.password}</div>
+              )}
+            </div>
+
+            <div className="form-group">
+              <label>Confirm Password</label>
+              <div className="password-input-container">
+                <input
+                  type={showConfirmPassword ? "text" : "password"}
+                  name="confirmPassword"
+                  placeholder="Confirm your password"
+                  value={formData.confirmPassword}
+                  onChange={handleInputChange}
+                  disabled={loading.register}
+                />
+                <button
+                  type="button"
+                  className="password-toggle"
+                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}
+                  disabled={loading.register}
+                >
+                  {showConfirmPassword ? <VisibilityOff /> : <Visibility />}
+                </button>
+              </div>
+              {validationErrors.confirmPassword && (
+                <div className="field-error">{validationErrors.confirmPassword}</div>
+              )}
+            </div>
+
+            <div className="form-options">
+              <label>
+                <input 
+                  type="checkbox" 
+                  checked={agreedToTerms}
+                  onChange={(e) => setAgreedToTerms(e.target.checked)}
+                /> 
+                I agree to the{' '}
+                <button type="button" className="link-button">
+                  Terms and Conditions
+                </button>
+              </label>
+            </div>
+            {validationErrors.terms && (
+              <div className="field-error">{validationErrors.terms}</div>
+            )}
+
+            <button 
+              type="submit" 
+              disabled={loading.register}
+              className={loading.register ? 'loading' : ''}
+            >
+              {loading.register ? 'Creating Account...' : 'Create Account →'}
+            </button>
+
+            {error && (
+              <div className="form-error">
+                {error}
+              </div>
+            )}
+
+            <p className="signup-link">
+              Already have an account?{' '}
+              <button 
+                type="button" 
+                className="link-button"
+                onClick={handleLogin}
+              >
+                Sign in
+              </button>
+            </p>
+          </form>
+        </div>
+      </div>
+    </div>
+  );
+};
+
+export default Signup;
diff --git a/src/features/users/LoginPage.jsx b/src/features/users/LoginPage.jsx
deleted file mode 100644
index e69de29b..00000000
diff --git a/src/features/users/Register.jsx b/src/features/users/Register.jsx
deleted file mode 100644
index e69de29b..00000000
diff --git a/src/features/users/UserProfile.jsx b/src/features/users/UserProfile.jsx
deleted file mode 100644
index e69de29b..00000000
diff --git a/src/layouts/components/Header.css b/src/layouts/components/Header.css
index c645e7d0..824dec7e 100644
--- a/src/layouts/components/Header.css
+++ b/src/layouts/components/Header.css
@@ -57,6 +57,123 @@
   display: flex;
   align-items: center;
   gap: 16px;
+  flex-shrink: 0;
+}
+
+/* Login and Logout Button Styles */
+.header-login-btn,
+.header-logout-btn {
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  gap: 8px;
+  padding: 8px 16px;
+  border-radius: 6px;
+  text-decoration: none;
+  font-size: 1rem;
+  font-weight: 500;
+  transition: all 0.2s ease;
+  cursor: pointer;
+  border: none;
+  background: none;
+  min-width: 44px;
+  min-height: 44px;
+}
+
+.header-login-btn {
+  color: #ccc;
+  background-color: transparent;
+  border: 1px solid #ccc;
+}
+
+.header-login-btn:hover {
+  color: #fff;
+  background-color: #e91e63;
+  border-color: #e91e63;
+}
+
+.header-logout-btn {
+  color: #ccc;
+  background-color: transparent;
+  border: none;
+  width: 36px;
+  height: 36px;
+  padding: 0;
+  margin: 0;
+  box-sizing: border-box;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  flex-shrink: 0;
+  outline: none;
+  box-shadow: none;
+}
+
+.header-logout-btn:hover {
+  color: #fff;
+  background-color: rgba(233, 30, 99, 0.1);
+  border: none;
+}
+
+.header-logout-btn:focus,
+.header-logout-btn:focus:hover {
+  outline: none;
+  box-shadow: none;
+  background-color: transparent !important;
+  border: none !important;
+}
+
+.header-logout-btn.loading,
+.header-logout-btn.loading:hover,
+.header-logout-btn.loading:focus,
+.header-logout-btn.loading:focus:hover {
+  opacity: 0.7;
+  cursor: not-allowed;
+  background-color: transparent !important;
+  border: none !important;
+  color: #ccc !important;
+  position: relative;
+  width: 36px !important;
+  height: 36px !important;
+  padding: 0 !important;
+  box-shadow: none !important;
+}
+
+.header-logout-btn.loading::after {
+  display: none !important;
+}
+
+.logout-spinner {
+  font-size: 1rem;
+  animation: spin 1s linear infinite;
+}
+
+@keyframes spin {
+  from {
+    transform: rotate(0deg);
+  }
+  to {
+    transform: rotate(360deg);
+  }
+}
+
+.header-login-btn svg,
+.header-logout-btn svg {
+  font-size: 1.2rem;
+}
+
+.header-logout-btn svg,
+.logout-spinner {
+  font-size: 1.2rem;
+  width: 1.2rem;
+  height: 1.2rem;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+}
+
+.login-text {
+  display: inline-block;
 }
 
 /* Cart Icon Styles */
@@ -254,4 +371,33 @@
     top: 60px;
     right: 10px;
   }
+  
+  /* Mobile styles for login/logout buttons */
+  .header-login-btn {
+    padding: 6px 12px;
+    font-size: 0.9rem;
+  }
+  
+  .header-logout-btn {
+    width: 32px;
+    height: 32px;
+    padding: 0;
+    font-size: 0.9rem;
+  }
+  
+  .header-login-btn svg,
+  .header-logout-btn svg {
+    font-size: 1rem;
+  }
+  
+  .login-text {
+    display: none; /* Hide text on mobile, show only icon */
+  }
+  
+  .header-logout-btn svg,
+  .logout-spinner {
+    font-size: 1rem;
+    width: 1rem;
+    height: 1rem;
+  }
 }
\ No newline at end of file
diff --git a/src/layouts/components/Header.jsx b/src/layouts/components/Header.jsx
index 5a8baeea..885e656a 100644
--- a/src/layouts/components/Header.jsx
+++ b/src/layouts/components/Header.jsx
@@ -1,16 +1,19 @@
 import React, { useState, useEffect } from 'react';
 import './Header.css';
-import { Link } from 'react-router';
-import { FaShoppingCart, FaBars, FaTimes } from 'react-icons/fa';
+import { Link } from 'react-router-dom';
+import { FaShoppingCart, FaBars, FaTimes, FaSignOutAlt, FaSignInAlt } from 'react-icons/fa';
 import NotificationsUI from '../../features/profile/NotificationsUI';
 import WishlistButton from '../../features/wishlist/WishlistButton';
 import { useCart } from '../../hooks/useCart';
+import { useUser } from '../../hooks/useUser';
+import LogoutButton from '../../features/auth/LogoutButton';
 
 function Header({ onSearch }) {
   const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
   const [isMobile, setIsMobile] = useState(false);
   const { itemCount } = useCart();
- 
+  const { isAuthenticated } = useUser();
+  
   // Check if we're on mobile view
   useEffect(() => {
     const checkIfMobile = () => {
@@ -57,8 +60,39 @@ function Header({ onSearch }) {
         </nav>
       </div>
      
+      {/* Actions section with conditional rendering based on authentication */}
       {/* Actions section with Notifications, Wishlist and Cart */}
       <div className={`header-actions ${isMobile ? 'mobile-transparent' : ''}`}>
+        {isAuthenticated ? (
+          <>
+            {/* Notifications Component - only show when logged in */}
+            <NotificationsUI />
+           
+            {/* Cart icon with item count - only show when logged in */}
+            <Link
+              to="/cart"
+              className={`cart-icon-wrapper ${isMobile ? 'mobile-transparent' : ''}`}
+            >
+              <FaShoppingCart className="cart-icon" />
+              {itemCount > 0 && (
+                <span className="cart-count">{itemCount}</span>
+              )}
+            </Link>
+
+            {/* Logout button - only show when logged in */}
+            <LogoutButton 
+              className="header-logout-btn"
+              children={<FaSignOutAlt />}
+              showConfirmation={true}
+            />
+          </>
+        ) : (
+          /* Login button - only show when not logged in */
+          <Link to="/login" className="header-login-btn">
+            <FaSignInAlt />
+            <span className="login-text">Login</span>
+          </Link>
+        )}
         {/* Notifications Component */}
         <NotificationsUI />
         
diff --git a/src/redux/slices/userSlice.js b/src/redux/slices/userSlice.js
index e69de29b..950cd04d 100644
--- a/src/redux/slices/userSlice.js
+++ b/src/redux/slices/userSlice.js
@@ -0,0 +1,374 @@
+import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
+import authService from '../../api2/services/authService';
+import userService from '../../api2/services/userService';
+
+// Token management utilities
+const getStoredToken = () => {
+  try {
+    return localStorage.getItem('access_token');
+  } catch (error) {
+    console.error('Error reading token from localStorage:', error);
+    return null;
+  }
+};
+
+const getStoredRefreshToken = () => {
+  try {
+    return localStorage.getItem('refresh_token');
+  } catch (error) {
+    console.error('Error reading refresh token from localStorage:', error);
+    return null;
+  }
+};
+
+const getStoredUser = () => {
+  try {
+    const userStr = localStorage.getItem('user');
+    // Handle the case where "undefined" was stored as a string
+    if (!userStr || userStr === 'undefined' || userStr === 'null') {
+      return null;
+    }
+    return JSON.parse(userStr);
+  } catch (error) {
+    console.error('Error reading user from localStorage:', error);
+    return null;
+  }
+};
+
+const saveAuthData = (accessToken, refreshToken, user) => {
+  try {
+    localStorage.setItem('access_token', accessToken);
+    localStorage.setItem('refresh_token', refreshToken);
+    // Only save user data if it's not null or undefined
+    if (user) {
+      localStorage.setItem('user', JSON.stringify(user));
+    } else {
+      localStorage.removeItem('user');
+    }
+  } catch (error) {
+    console.error('Error saving auth data to localStorage:', error);
+  }
+};
+
+const clearAuthData = () => {
+  try {
+    localStorage.removeItem('access_token');
+    localStorage.removeItem('refresh_token');
+    localStorage.removeItem('user');
+  } catch (error) {
+    console.error('Error clearing auth data from localStorage:', error);
+  }
+};
+
+// Async thunks for API calls
+export const loginUser = createAsyncThunk(
+  'user/loginUser',
+  async (credentials, { rejectWithValue }) => {
+    try {
+      const response = await authService.login(credentials);
+      const { access_token, refresh_token, user: authUser } = response;
+      
+      // If auth service returns user data directly, use it
+      let user = authUser;
+      
+      // If no user data from auth service, try to get it from user service
+      if (!user) {
+        try {
+          user = await userService.getCurrentUser();
+        } catch (userError) {
+          console.warn('User service not available, proceeding with login without user data:', userError.message);
+          // Don't fail the login if user service is unavailable
+        }
+      }
+      
+      // Save auth data to localStorage
+      saveAuthData(access_token, refresh_token, user);
+      
+      return { token: access_token, refreshToken: refresh_token, user };
+    } catch (error) {
+      return rejectWithValue(error.message);
+    }
+  }
+);
+
+export const registerUser = createAsyncThunk(
+  'user/registerUser',
+  async (userData, { rejectWithValue }) => {
+    try {
+      const user = await authService.register(userData);
+      
+      // After registration, user needs to login to get tokens
+      // For now, we'll just return the user data
+      // In a real app, you might want to auto-login after registration
+      
+      return { user };
+    } catch (error) {
+      return rejectWithValue(error.message);
+    }
+  }
+);
+
+export const logoutUser = createAsyncThunk(
+  'user/logoutUser',
+  async (_, { rejectWithValue }) => {
+    try {
+      const refreshToken = getStoredRefreshToken();
+      if (refreshToken) {
+        await authService.logout(refreshToken);
+      }
+      // Clear localStorage
+      clearAuthData();
+      return null;
+    } catch (error) {
+      // Even if API call fails, clear local data
+      clearAuthData();
+      return rejectWithValue(error.message);
+    }
+  }
+);
+
+
+
+export const getCurrentUser = createAsyncThunk(
+  'user/getCurrentUser',
+  async (_, { rejectWithValue }) => {
+    try {
+      const user = await userService.getCurrentUser();
+      return user;
+    } catch (error) {
+      return rejectWithValue(error.message);
+    }
+  }
+);
+
+export const updateUserProfile = createAsyncThunk(
+  'user/updateUserProfile',
+  async (userData, { rejectWithValue }) => {
+    try {
+      const user = await userService.updateProfile(userData);
+      
+      // Update user in localStorage
+      const currentToken = getStoredToken();
+      const currentRefreshToken = getStoredRefreshToken();
+      saveAuthData(currentToken, currentRefreshToken, user);
+      
+      return user;
+    } catch (error) {
+      return rejectWithValue(error.message);
+    }
+  }
+);
+
+export const changePassword = createAsyncThunk(
+  'user/changePassword',
+  async (passwordData, { rejectWithValue }) => {
+    try {
+      await userService.changePassword(passwordData);
+      return true;
+    } catch (error) {
+      return rejectWithValue(error.message);
+    }
+  }
+);
+
+// Note: These methods are removed as they're not part of the user service anymore
+// If you need admin functionality to fetch all users, you'll need to implement
+// separate admin service or add these methods to the user service
+
+const initialState = {
+  // Authentication state
+  user: null,
+  token: null,
+  isAuthenticated: false,
+  isInitialized: false, // Add initialization flag
+  
+  // User management state
+  currentUser: null,
+  
+  // Loading states
+  loading: {
+    login: false,
+    register: false,
+    logout: false,
+    currentUser: false,
+    updateProfile: false,
+    changePassword: false
+  },
+  
+  // Error state
+  error: null
+};
+
+const userSlice = createSlice({
+  name: 'user',
+  initialState,
+  reducers: {
+    clearError: (state) => {
+      state.error = null;
+    },
+    clearCurrentUser: (state) => {
+      state.currentUser = null;
+    },
+    // Manual logout (without API call)
+    manualLogout: (state) => {
+      state.user = null;
+      state.token = null;
+      state.isAuthenticated = false;
+      state.currentUser = null;
+      state.error = null;
+      clearAuthData();
+    },
+    // Initialize auth state from localStorage
+    initializeAuth: (state) => {
+      const storedToken = getStoredToken();
+      const storedUser = getStoredUser();
+      
+      // Clean up corrupted localStorage data
+      try {
+        const userStr = localStorage.getItem('user');
+        if (userStr === 'undefined' || userStr === 'null') {
+          localStorage.removeItem('user');
+        }
+      } catch (error) {
+        console.error('Error cleaning up localStorage:', error);
+      }
+      
+      state.user = storedUser;
+      state.token = storedToken;
+      state.isAuthenticated = !!storedToken;
+      state.isInitialized = true;
+    }
+  },
+  extraReducers: (builder) => {
+    builder
+      // Handle loginUser
+      .addCase(loginUser.pending, (state) => {
+        state.loading.login = true;
+        state.error = null;
+      })
+      .addCase(loginUser.fulfilled, (state, action) => {
+        state.loading.login = false;
+        state.user = action.payload.user;
+        state.token = action.payload.token;
+        state.isAuthenticated = true;
+      })
+      .addCase(loginUser.rejected, (state, action) => {
+        state.loading.login = false;
+        state.error = action.payload;
+      })
+      
+      // Handle registerUser
+      .addCase(registerUser.pending, (state) => {
+        state.loading.register = true;
+        state.error = null;
+      })
+      .addCase(registerUser.fulfilled, (state, action) => {
+        state.loading.register = false;
+        state.user = action.payload.user;
+        state.token = action.payload.token;
+        state.isAuthenticated = true;
+      })
+      .addCase(registerUser.rejected, (state, action) => {
+        state.loading.register = false;
+        state.error = action.payload;
+      })
+      
+      // Handle logoutUser
+      .addCase(logoutUser.pending, (state) => {
+        state.loading.logout = true;
+        state.error = null;
+      })
+      .addCase(logoutUser.fulfilled, (state) => {
+        state.loading.logout = false;
+        state.user = null;
+        state.token = null;
+        state.isAuthenticated = false;
+        state.currentUser = null;
+      })
+      .addCase(logoutUser.rejected, (state, action) => {
+        state.loading.logout = false;
+        state.user = null;
+        state.token = null;
+        state.isAuthenticated = false;
+        state.currentUser = null;
+        state.error = action.payload;
+      })
+      
+
+      
+      // Handle getCurrentUser
+      .addCase(getCurrentUser.pending, (state) => {
+        state.loading.currentUser = true;
+        state.error = null;
+      })
+      .addCase(getCurrentUser.fulfilled, (state, action) => {
+        state.loading.currentUser = false;
+        state.currentUser = action.payload;
+        // Also update the main user state if it's null
+        if (!state.user && action.payload) {
+          state.user = action.payload;
+          // Update localStorage with user data
+          const currentToken = getStoredToken();
+          const currentRefreshToken = getStoredRefreshToken();
+          saveAuthData(currentToken, currentRefreshToken, action.payload);
+        }
+      })
+      .addCase(getCurrentUser.rejected, (state, action) => {
+        state.loading.currentUser = false;
+        state.error = action.payload;
+      })
+      
+      // Handle updateUserProfile
+      .addCase(updateUserProfile.pending, (state) => {
+        state.loading.updateProfile = true;
+        state.error = null;
+      })
+      .addCase(updateUserProfile.fulfilled, (state, action) => {
+        state.loading.updateProfile = false;
+        state.user = action.payload;
+        if (state.currentUser?.id === action.payload.id) {
+          state.currentUser = action.payload;
+        }
+      })
+      .addCase(updateUserProfile.rejected, (state, action) => {
+        state.loading.updateProfile = false;
+        state.error = action.payload;
+      })
+      
+      // Handle changePassword
+      .addCase(changePassword.pending, (state) => {
+        state.loading.changePassword = true;
+        state.error = null;
+      })
+      .addCase(changePassword.fulfilled, (state) => {
+        state.loading.changePassword = false;
+      })
+      .addCase(changePassword.rejected, (state, action) => {
+        state.loading.changePassword = false;
+        state.error = action.payload;
+      });
+  }
+});
+
+// Selectors
+export const selectUser = (state) => state.user.user;
+export const selectToken = (state) => state.user.token;
+export const selectIsAuthenticated = (state) => state.user.isAuthenticated;
+export const selectIsInitialized = (state) => state.user.isInitialized;
+export const selectCurrentUser = (state) => state.user.currentUser;
+// Note: selectUsers removed as fetchUsers functionality is not available
+export const selectUserLoading = (state) => state.user.loading;
+export const selectUserError = (state) => state.user.error;
+
+// Specific loading selectors
+export const selectLoginLoading = (state) => state.user.loading.login;
+export const selectRegisterLoading = (state) => state.user.loading.register;
+export const selectLogoutLoading = (state) => state.user.loading.logout;
+
+export const selectCurrentUserLoading = (state) => state.user.loading.currentUser;
+export const selectUpdateProfileLoading = (state) => state.user.loading.updateProfile;
+export const selectChangePasswordLoading = (state) => state.user.loading.changePassword;
+// Note: These selectors removed as fetchUsers/fetchUserById functionality is not available
+
+export const { clearError, clearCurrentUser, manualLogout, initializeAuth } = userSlice.actions;
+export default userSlice.reducer;
diff --git a/src/redux/store.js b/src/redux/store.js
index 479ec472..eba085a2 100644
--- a/src/redux/store.js
+++ b/src/redux/store.js
@@ -3,6 +3,7 @@ import productReducer from './slices/productSlice';
 import cartReducer from './slices/cartSlice';
 import categoryReducer from './slices/categorySlice';
 import inventoryReducer from './slices/inventorySlice';
+import userReducer from './slices/userSlice';
 import wishlistReducer from './slices/wishlistSlice';
 
 export const store = configureStore({
@@ -11,6 +12,8 @@ export const store = configureStore({
     cart: cartReducer,
     categories: categoryReducer,
     inventory: inventoryReducer,
+    user: userReducer
+    inventory: inventoryReducer,
     wishlist: wishlistReducer,
   },
   middleware: (getDefaultMiddleware) =>
diff --git a/src/routes/AppRouter.jsx b/src/routes/AppRouter.jsx
index 71f8cb2b..4706abd0 100644
--- a/src/routes/AppRouter.jsx
+++ b/src/routes/AppRouter.jsx
@@ -2,6 +2,8 @@ import React from 'react';
 import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
 import Product from '../features/products/Products.jsx';
 import Login from '../features/auth/login.jsx';
+import Signup from '../features/auth/signup.jsx';
+import Unauthorized from '../features/auth/Unauthorized.jsx';
 import ProfilePage from '../features/profile/ProfilePage.jsx';
 import AccountPage from '../features/profile/AccountPage.jsx';
 import EditProfile from '../features/profile/Edit-Profile.jsx';
@@ -19,14 +21,45 @@ import ProductView from '../features/products/ProductView/ProductView.jsx';
 import AboutUs from '../features/about/AboutUs.jsx';
 import DeliveryPage from '../features/cart/Delivery.jsx';
 import LandingPage from '../features/home/LandingPage.jsx';
+import ProtectedRoute from './ProtectedRoute.jsx';
 import WishlistPage from '../features/wishlist/WishlistPage.jsx';
 import InvoiceTest from '../features/invoice/InvoiceTest';
 
 const AppRouter = () => {
-    
   return (
     <Router>
       <Routes>
+        {/* Admin Routes - Authentication + Admin role required (must come before other routes) */}
+        <Route path="/admin" element={
+          <ProtectedRoute allowedRoles={['ADMIN']}>
+            <AdminPage />
+          </ProtectedRoute>
+        } />
+        
+        {/* Protected Routes - Authentication required */}
+        <Route path="/profile" element={<ProtectedRoute><ProfilePage /></ProtectedRoute>} />
+        <Route path="/account" element={<ProtectedRoute><AccountPage /></ProtectedRoute>} />
+        <Route path="/addresses" element={<ProtectedRoute><ManageAddressesPage /></ProtectedRoute>} />
+        <Route path="/orders" element={<ProtectedRoute><OrderManager /></ProtectedRoute>} />
+        <Route path="/edit-profile" element={<ProtectedRoute><EditProfile /></ProtectedRoute>} />
+        <Route path="/payments" element={<ProtectedRoute><PaymentMethods /></ProtectedRoute>} />
+        <Route path="/help" element={<ProtectedRoute><Help /></ProtectedRoute>} />
+        <Route path="/return-request" element={<ProtectedRoute><ReturnRequest /></ProtectedRoute>} />
+        <Route path="/checkout" element={<ProtectedRoute><CheckoutPage /></ProtectedRoute>} />
+        <Route path="/delivery" element={<ProtectedRoute><DeliveryPage /></ProtectedRoute>} />
+        
+        {/* Public Routes - No authentication required */}
+        <Route path="/products" element={<Product />} />
+        <Route path="/cart" element={<CartPage />} />
+        <Route path="/login" element={<Login />} />
+        <Route path="/signup" element={<Signup />} />
+        <Route path="/unauthorized" element={<Unauthorized />} />
+        <Route path="/about" element={<AboutUs />} />
+        <Route path="/contact" element={<ContactPage />} />
+        <Route path="/product/:id" element={<ProductView />} />
+        <Route path="/oldLadingPage" element={<LandingPage />} />
+        
+        {/* Home route - must be last */}
         <Route path="/" element={<LandingPages />} />
         <Route path='products' element={<Product></Product>}></Route>
         <Route path='login' element={<Login></Login>}></Route>
diff --git a/src/routes/ProtectedRoute.jsx b/src/routes/ProtectedRoute.jsx
index e69de29b..296e70fe 100644
--- a/src/routes/ProtectedRoute.jsx
+++ b/src/routes/ProtectedRoute.jsx
@@ -0,0 +1,34 @@
+import React, { useMemo } from 'react';
+import { Navigate } from 'react-router-dom';
+import { useSelector } from 'react-redux';
+import { selectUser, selectIsAuthenticated, selectIsInitialized } from '../redux/slices/userSlice';
+
+const ProtectedRoute = ({ children, allowedRoles = [] }) => {
+  const user = useSelector(selectUser);
+  const isAuthenticated = useSelector(selectIsAuthenticated);
+  const isInitialized = useSelector(selectIsInitialized);
+
+  // Memoize the route decision to prevent unnecessary re-renders
+  const routeDecision = useMemo(() => {
+    // Wait for initialization before making any decisions
+    if (!isInitialized) {
+      return { type: 'loading', component: <div>Loading...</div> };
+    }
+
+    // Check authentication
+    if (!isAuthenticated) {
+      return { type: 'redirect', component: <Navigate to="/login" replace /> };
+    }
+
+    // Check role-based access if roles are specified
+    if (allowedRoles.length > 0 && user && !allowedRoles.map(role => role.toLowerCase()).includes(user.role.toLowerCase())) {
+      return { type: 'redirect', component: <Navigate to="/" replace /> };
+    }
+
+    return { type: 'granted', component: children };
+  }, [isAuthenticated, isInitialized, user, allowedRoles, children]);
+
+  return routeDecision.component;
+};
+
+export default ProtectedRoute;
