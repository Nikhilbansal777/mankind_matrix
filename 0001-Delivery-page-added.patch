From 1d6e0d9ab245d6383036d09fa79608e64ff8dd96 Mon Sep 17 00:00:00 2001
From: Shravani2015 <shravanijangam2015@gmail.com>
Date: Tue, 13 May 2025 00:01:18 +0000
Subject: [PATCH 1/3] Delivery page added

---
 package-lock.json              |  40 +++
 package.json                   |   1 +
 src/features/cart/Delivery.css | 529 +++++++++++++++++++++++++++++++++
 src/features/cart/Delivery.jsx | 328 ++++++++++++++++++++
 src/routes/AppRouter.jsx       |   2 +
 5 files changed, 900 insertions(+)
 create mode 100644 src/features/cart/Delivery.css
 create mode 100644 src/features/cart/Delivery.jsx

diff --git a/package-lock.json b/package-lock.json
index e37cb6f2..7960f1f1 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -12,6 +12,8 @@
         "@testing-library/jest-dom": "^6.6.3",
         "@testing-library/react": "^16.3.0",
         "@testing-library/user-event": "^13.5.0",
+        "axios": "^1.9.0",
+        "lucide-react": "^0.510.0",
         "react": "^19.1.0",
         "react-dom": "^19.1.0",
         "react-icons": "^5.5.0",
@@ -4540,6 +4542,30 @@
         "node": ">=4"
       }
     },
+    "node_modules/axios": {
+      "version": "1.9.0",
+      "resolved": "https://registry.npmjs.org/axios/-/axios-1.9.0.tgz",
+      "integrity": "sha512-re4CqKTJaURpzbLHtIi6XpDv20/CnpXOtjRY5/CU32L8gU8ek9UIivcfvSWvmKEngmVbrUtPpdDwWDWL7DNHvg==",
+      "dependencies": {
+        "follow-redirects": "^1.15.6",
+        "form-data": "^4.0.0",
+        "proxy-from-env": "^1.1.0"
+      }
+    },
+    "node_modules/axios/node_modules/form-data": {
+      "version": "4.0.2",
+      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.2.tgz",
+      "integrity": "sha512-hGfm/slu0ZabnNt4oaRZ6uREyfCj6P4fT/n6A1rGV+Z0VdGXjfOhVUpkn6qVQONHGIFwmveGXyDs75+nr6FM8w==",
+      "dependencies": {
+        "asynckit": "^0.4.0",
+        "combined-stream": "^1.0.8",
+        "es-set-tostringtag": "^2.1.0",
+        "mime-types": "^2.1.12"
+      },
+      "engines": {
+        "node": ">= 6"
+      }
+    },
     "node_modules/axobject-query": {
       "version": "4.1.0",
       "resolved": "https://registry.npmjs.org/axobject-query/-/axobject-query-4.1.0.tgz",
@@ -10670,6 +10696,15 @@
         "yallist": "^3.0.2"
       }
     },
+    "node_modules/lucide-react": {
+      "version": "0.510.0",
+      "resolved": "https://registry.npmjs.org/lucide-react/-/lucide-react-0.510.0.tgz",
+      "integrity": "sha512-p8SQRAMVh7NhsAIETokSqDrc5CHnDLbV29mMnzaXx+Vc/hnqQzwI2r0FMWCcoTXnbw2KEjy48xwpGdEL+ck06Q==",
+      "license": "ISC",
+      "peerDependencies": {
+        "react": "^16.5.1 || ^17.0.0 || ^18.0.0 || ^19.0.0"
+      }
+    },
     "node_modules/lz-string": {
       "version": "1.5.0",
       "resolved": "https://registry.npmjs.org/lz-string/-/lz-string-1.5.0.tgz",
@@ -12973,6 +13008,11 @@
         "node": ">= 0.10"
       }
     },
+    "node_modules/proxy-from-env": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
+      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg=="
+    },
     "node_modules/psl": {
       "version": "1.15.0",
       "resolved": "https://registry.npmjs.org/psl/-/psl-1.15.0.tgz",
diff --git a/package.json b/package.json
index 965b0803..8ffa651f 100644
--- a/package.json
+++ b/package.json
@@ -8,6 +8,7 @@
     "@testing-library/react": "^16.3.0",
     "@testing-library/user-event": "^13.5.0",
     "axios": "^1.9.0",
+    "lucide-react": "^0.510.0",
     "react": "^19.1.0",
     "react-dom": "^19.1.0",
     "react-icons": "^5.5.0",
diff --git a/src/features/cart/Delivery.css b/src/features/cart/Delivery.css
new file mode 100644
index 00000000..1a322d66
--- /dev/null
+++ b/src/features/cart/Delivery.css
@@ -0,0 +1,529 @@
+/* Delivery.css */
+
+.delivery-container {
+  max-width: 1200px;
+  margin: 0 auto;
+  padding: 20px;
+  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
+  color: #333;
+}
+
+.delivery-container h1 {
+  font-size: 24px;
+  font-weight: 600;
+  margin-bottom: 24px;
+  color: #222;
+}
+
+.delivery-container h2 {
+  font-size: 18px;
+  font-weight: 600;
+  margin-bottom: 16px;
+}
+
+/* Checkout Steps */
+.checkout-steps {
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+  margin-bottom: 30px;
+  padding: 0 10%;
+}
+
+.step {
+  display: flex;
+  flex-direction: column;
+  align-items: center;
+  position: relative;
+}
+
+.step-number {
+  width: 30px;
+  height: 30px;
+  border-radius: 50%;
+  background-color: #e2e8f0;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  font-weight: 600;
+  margin-bottom: 8px;
+  color: #64748b;
+}
+
+.step.active .step-number {
+  background-color: #3b82f6;
+  color: white;
+}
+
+.step.completed .step-number {
+  background-color: #10b981;
+  color: white;
+}
+
+.step-label {
+  font-size: 14px;
+  font-weight: 500;
+  color: #64748b;
+}
+
+.step.active .step-label {
+  color: #3b82f6;
+  font-weight: 600;
+}
+
+.step.completed .step-label {
+  color: #10b981;
+  font-weight: 600;
+}
+
+.step-divider {
+  height: 2px;
+  flex-grow: 1;
+  background-color: #e2e8f0;
+  margin: 0 8px;
+  margin-bottom: 30px;
+}
+
+/* Main content layout */
+.delivery-content {
+  display: flex;
+  gap: 24px;
+}
+
+.delivery-main {
+  flex: 1;
+}
+
+.delivery-sidebar {
+  width: 340px;
+}
+
+/* Delivery sections */
+.delivery-section {
+  background-color: white;
+  border-radius: 8px;
+  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
+  padding: 20px;
+  margin-bottom: 20px;
+}
+
+.section-header {
+  display: flex;
+  justify-content: space-between;
+  align-items: center;
+  margin-bottom: 16px;
+}
+
+.change-link {
+  color: #3b82f6;
+  font-size: 14px;
+  font-weight: 500;
+  text-decoration: none;
+}
+
+.change-link:hover {
+  text-decoration: underline;
+}
+
+/* Address styles */
+.address-details {
+  display: flex;
+  gap: 16px;
+}
+
+.address-icon {
+  color: #64748b;
+  margin-top: 3px;
+}
+
+.address-info p {
+  margin: 4px 0;
+}
+
+.address-name {
+  font-weight: 600;
+}
+
+.address-phone {
+  color: #64748b;
+}
+
+/* Delivery options */
+.delivery-types {
+  display: flex;
+  flex-direction: column;
+  gap: 12px;
+}
+
+.delivery-option {
+  display: flex;
+  align-items: center;
+  padding: 16px;
+  border: 2px solid #e2e8f0;
+  border-radius: 8px;
+  cursor: pointer;
+  position: relative;
+  transition: all 0.2s ease;
+}
+
+.delivery-option:hover,
+.delivery-option.option-hover {
+  border-color: #cbd5e1;
+  background-color: #f8fafc;
+}
+
+.delivery-option.selected {
+  border-color: #3b82f6;
+  background-color: #eff6ff;
+}
+
+.option-icon {
+  color: #64748b;
+  margin-right: 16px;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+}
+
+.option-details {
+  flex: 1;
+}
+
+.option-details h3 {
+  font-size: 16px;
+  font-weight: 600;
+  margin-bottom: 4px;
+  margin-top: 0;
+}
+
+.option-details p {
+  font-size: 14px;
+  color: #64748b;
+  margin: 0;
+}
+
+.option-price {
+  font-weight: 600;
+  margin-right: 16px;
+}
+
+.option-check {
+  width: 18px;
+  height: 18px;
+  border-radius: 50%;
+  background-color: #3b82f6;
+  color: white;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+}
+
+/* Date options */
+.date-options {
+  display: grid;
+  grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
+  gap: 12px;
+}
+
+.date-option {
+  display: flex;
+  align-items: center;
+  padding: 12px;
+  border: 2px solid #e2e8f0;
+  border-radius: 8px;
+  cursor: pointer;
+  position: relative;
+  transition: all 0.2s ease;
+}
+
+.date-option:hover {
+  border-color: #cbd5e1;
+  background-color: #f8fafc;
+}
+
+.date-option.selected {
+  border-color: #3b82f6;
+  background-color: #eff6ff;
+}
+
+.date-icon {
+  color: #64748b;
+  margin-right: 12px;
+}
+
+.date-details {
+  flex: 1;
+}
+
+.date-details h3 {
+  font-size: 14px;
+  font-weight: 600;
+  margin: 0;
+  margin-bottom: 2px;
+}
+
+.date-details p {
+  font-size: 13px;
+  color: #64748b;
+  margin: 0;
+}
+
+.date-check {
+  width: 18px;
+  height: 18px;
+  border-radius: 50%;
+  background-color: #3b82f6;
+  color: white;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+}
+
+/* Time slot options */
+.time-options {
+  display: grid;
+  grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
+  gap: 12px;
+}
+
+.time-option {
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  padding: 12px;
+  border: 2px solid #e2e8f0;
+  border-radius: 8px;
+  cursor: pointer;
+  position: relative;
+  transition: all 0.2s ease;
+}
+
+.time-option:hover {
+  border-color: #cbd5e1;
+  background-color: #f8fafc;
+}
+
+.time-option.selected {
+  border-color: #3b82f6;
+  background-color: #eff6ff;
+}
+
+.time-option p {
+  font-size: 14px;
+  font-weight: 500;
+  margin: 0;
+  margin-right: 6px;
+}
+
+.time-check {
+  width: 16px;
+  height: 16px;
+  border-radius: 50%;
+  background-color: #3b82f6;
+  color: white;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  position: absolute;
+  top: 8px;
+  right: 8px;
+}
+
+/* Order summary */
+.order-summary {
+  background-color: white;
+  border-radius: 8px;
+  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
+  padding: 20px;
+  position: sticky;
+  top: 20px;
+}
+
+.cart-items {
+  max-height: 300px;
+  overflow-y: auto;
+  margin-bottom: 16px;
+  padding-right: 6px;
+}
+
+.cart-item {
+  display: flex;
+  padding: 12px 0;
+  border-bottom: 1px solid #e2e8f0;
+}
+
+.cart-item:last-child {
+  border-bottom: none;
+}
+
+.item-image {
+  width: 60px;
+  height: 60px;
+  border-radius: 4px;
+  overflow: hidden;
+  margin-right: 12px;
+}
+
+.item-image img {
+  width: 100%;
+  height: 100%;
+  object-fit: cover;
+}
+
+.item-details {
+  flex: 1;
+}
+
+.item-name {
+  font-size: 14px;
+  font-weight: 600;
+  margin: 0 0 6px 0;
+}
+
+.item-meta {
+  display: flex;
+  justify-content: space-between;
+  font-size: 13px;
+  color: #64748b;
+}
+
+.item-meta p {
+  margin: 0;
+}
+
+.summary-details {
+  padding: 16px 0;
+  border-top: 1px solid #e2e8f0;
+  border-bottom: 1px solid #e2e8f0;
+  margin-bottom: 16px;
+}
+
+.summary-row {
+  display: flex;
+  justify-content: space-between;
+  margin-bottom: 8px;
+  font-size: 14px;
+}
+
+.summary-row.total {
+  font-size: 16px;
+  font-weight: 700;
+  color: #222;
+  margin-top: 12px;
+  padding-top: 12px;
+  border-top: 1px dashed #e2e8f0;
+}
+
+.delivery-info {
+  background-color: #f8fafc;
+  border-radius: 6px;
+  padding: 12px;
+  margin-bottom: 16px;
+}
+
+.selected-delivery h3 {
+  font-size: 14px;
+  font-weight: 600;
+  margin: 0 0 6px 0;
+}
+
+.selected-delivery p {
+  font-size: 13px;
+  margin: 2px 0;
+  color: #64748b;
+}
+
+.delivery-prompt {
+  font-size: 13px;
+  color: #64748b;
+  text-align: center;
+  padding: 8px 0;
+}
+
+.continue-button {
+  display: block;
+  width: 100%;
+  padding: 12px 16px;
+  background-color: #3b82f6;
+  color: white;
+  border: none;
+  border-radius: 6px;
+  font-size: 16px;
+  font-weight: 600;
+  cursor: pointer;
+  transition: background-color 0.2s ease;
+  margin-bottom: 12px;
+}
+
+.continue-button:hover {
+  background-color: #2563eb;
+}
+
+.continue-button:disabled {
+  background-color: #94a3b8;
+  cursor: not-allowed;
+}
+
+.back-link {
+  display: block;
+  text-align: center;
+  color: #64748b;
+  font-size: 14px;
+  text-decoration: none;
+}
+
+.back-link:hover {
+  color: #475569;
+  text-decoration: underline;
+}
+
+/* Loading spinner */
+.loading-spinner {
+  display: flex;
+  flex-direction: column;
+  align-items: center;
+  justify-content: center;
+  height: 400px;
+  text-align: center;
+}
+
+.spinner {
+  border: 4px solid rgba(0, 0, 0, 0.1);
+  width: 40px;
+  height: 40px;
+  border-radius: 50%;
+  border-left-color: #3b82f6;
+  animation: spin 1s linear infinite;
+  margin-bottom: 16px;
+}
+
+@keyframes spin {
+  0% {
+    transform: rotate(0deg);
+  }
+  100% {
+    transform: rotate(360deg);
+  }
+}
+
+/* Responsive styles */
+@media (max-width: 900px) {
+  .delivery-content {
+    flex-direction: column;
+  }
+  
+  .delivery-sidebar {
+    width: 100%;
+  }
+  
+  .checkout-steps {
+    padding: 0;
+  }
+}
+
+@media (max-width: 600px) {
+  .date-options,
+  .time-options {
+    grid-template-columns: 1fr;
+  }
+}
\ No newline at end of file
diff --git a/src/features/cart/Delivery.jsx b/src/features/cart/Delivery.jsx
new file mode 100644
index 00000000..5c9c7a2c
--- /dev/null
+++ b/src/features/cart/Delivery.jsx
@@ -0,0 +1,328 @@
+import React, { useState, useEffect } from 'react';
+import { Link } from 'react-router-dom';
+import { Calendar, Clock, Truck, Check, User, MapPin, ShoppingBag } from 'lucide-react';
+import withLayout from '../../layouts/HOC/withLayout';
+import './Delivery.css';
+
+// Sample delivery options data - in a real app, this would come from your backend
+const deliveryOptions = {
+  standard: {
+    title: "Standard Delivery",
+    price: 0,
+    icon: <Truck className="text-gray-500" />,
+    deliveryDays: [
+      { date: "May 15, 2025", day: "Thursday", slots: ["Morning", "Afternoon"] },
+      { date: "May 16, 2025", day: "Friday", slots: ["Morning", "Afternoon", "Evening"] },
+      { date: "May 17, 2025", day: "Saturday", slots: ["Morning", "Afternoon"] },
+    ]
+  },
+  express: {
+    title: "Express Delivery",
+    price: 9.99,
+    icon: <Clock className="text-blue-500" />,
+    deliveryDays: [
+      { date: "May 13, 2025", day: "Tuesday", slots: ["Afternoon", "Evening"] },
+      { date: "May 14, 2025", day: "Wednesday", slots: ["Morning", "Afternoon", "Evening"] },
+    ]
+  }
+};
+
+// Sample cart items - in a real app, this would come from your cart state or API
+const cartItems = [
+  { id: 1, name: "Wireless Earbuds", price: 89.99, quantity: 1, image: "/api/placeholder/80/80" },
+  { id: 2, name: "Smart Watch", price: 199.99, quantity: 1, image: "/api/placeholder/80/80" },
+  { id: 3, name: "Portable Charger", price: 29.99, quantity: 2, image: "/api/placeholder/80/80" }
+];
+
+const DeliveryPage = () => {
+  const [deliveryType, setDeliveryType] = useState("standard");
+  const [selectedDate, setSelectedDate] = useState(null);
+  const [selectedTimeSlot, setSelectedTimeSlot] = useState(null);
+  const [isLoading, setIsLoading] = useState(true);
+  
+  // Calculate cart totals
+  const subtotal = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
+  const deliveryFee = deliveryOptions[deliveryType].price;
+  const total = subtotal + deliveryFee;
+
+  useEffect(() => {
+    // Simulate loading data
+    const timer = setTimeout(() => {
+      setIsLoading(false);
+    }, 800);
+    
+    // Initialize page functionality
+    if (window.app && typeof window.app.initDeliveryPage === 'function') {
+      window.app.initDeliveryPage();
+    } else {
+      // Fallback initialization
+      initBoxInteractions();
+    }
+
+    return () => {
+      clearTimeout(timer);
+      // Cleanup if needed
+    };
+  }, []);
+
+  // Fallback function if vanilla JS isn't available
+  const initBoxInteractions = () => {
+    const boxes = document.querySelectorAll('.delivery-option');
+    boxes.forEach(box => {
+      box.addEventListener('mouseenter', () => box.classList.add('option-hover'));
+      box.addEventListener('mouseleave', () => box.classList.remove('option-hover'));
+    });
+  };
+
+  const handleContinue = () => {
+    if (!selectedDate || !selectedTimeSlot) {
+      alert("Please select both a delivery date and time slot");
+      return;
+    }
+    
+    // In a real app, you would save the selection to your state/context and navigate
+    console.log({
+      deliveryType,
+      selectedDate,
+      selectedTimeSlot,
+      cost: deliveryOptions[deliveryType].price
+    });
+    
+    alert("Proceeding to checkout with your selected delivery options!");
+    // Navigate to checkout page
+    // history.push('/checkout');
+  };
+
+  if (isLoading) {
+    return (
+      <div className="delivery-container page" id="delivery-page">
+        <div className="loading-spinner">
+          <div className="spinner"></div>
+          <p>Loading delivery options...</p>
+        </div>
+      </div>
+    );
+  }
+
+  return (
+    <div className="delivery-container page" id="delivery-page">
+      <div className="checkout-steps">
+        <div className="step completed">
+          <div className="step-number">1</div>
+          <div className="step-label">Cart</div>
+        </div>
+        <div className="step-divider"></div>
+        <div className="step active">
+          <div className="step-number">2</div>
+          <div className="step-label">Delivery</div>
+        </div>
+        <div className="step-divider"></div>
+        <div className="step">
+          <div className="step-number">3</div>
+          <div className="step-label">Payment</div>
+        </div>
+        <div className="step-divider"></div>
+        <div className="step">
+          <div className="step-number">4</div>
+          <div className="step-label">Confirmation</div>
+        </div>
+      </div>
+      
+      <h1>Select Delivery Options</h1>
+      
+      <div className="delivery-content">
+        <div className="delivery-main">
+          {/* Delivery Address Summary */}
+          <div className="delivery-section delivery-address">
+            <div className="section-header">
+              <h2>Delivery Address</h2>
+              <Link to="/addresses" className="change-link">Change</Link>
+            </div>
+            <div className="address-details">
+              <div className="address-icon">
+                <MapPin size={20} />
+              </div>
+              <div className="address-info">
+                <p className="address-name">John Doe</p>
+                <p className="address-line">123 Main Street, Apt 4B</p>
+                <p className="address-line">New York, NY 10001</p>
+                <p className="address-line">United States</p>
+                <p className="address-phone">+1 (555) 123-4567</p>
+              </div>
+            </div>
+          </div>
+
+          {/* Delivery Type Selection */}
+          <div className="delivery-section delivery-options">
+            <h2>Delivery Method</h2>
+            <div className="delivery-types">
+              <div 
+                className={`delivery-option ${deliveryType === "standard" ? "selected" : ""}`}
+                onClick={() => setDeliveryType("standard")}
+              >
+                <div className="option-icon">
+                  <Truck size={20} />
+                </div>
+                <div className="option-details">
+                  <h3>Standard Delivery</h3>
+                  <p>Delivery within 3-5 days</p>
+                </div>
+                <div className="option-price">
+                  <span>Free</span>
+                </div>
+                {deliveryType === "standard" && (
+                  <div className="option-check">
+                    <Check size={16} />
+                  </div>
+                )}
+              </div>
+              
+              <div 
+                className={`delivery-option ${deliveryType === "express" ? "selected" : ""}`}
+                onClick={() => setDeliveryType("express")}
+              >
+                <div className="option-icon">
+                  <Clock size={20} />
+                </div>
+                <div className="option-details">
+                  <h3>Express Delivery</h3>
+                  <p>Get it within 1-2 days</p>
+                </div>
+                <div className="option-price">
+                  <span>${deliveryOptions.express.price.toFixed(2)}</span>
+                </div>
+                {deliveryType === "express" && (
+                  <div className="option-check">
+                    <Check size={16} />
+                  </div>
+                )}
+              </div>
+            </div>
+          </div>
+          
+          {/* Date Selection */}
+          <div className="delivery-section delivery-dates">
+            <h2>Delivery Date</h2>
+            <div className="date-options">
+              {deliveryOptions[deliveryType].deliveryDays.map((dayOption, index) => (
+                <div 
+                  key={index}
+                  className={`date-option ${selectedDate === dayOption.date ? "selected" : ""}`}
+                  onClick={() => {
+                    setSelectedDate(dayOption.date);
+                    setSelectedTimeSlot(null); // Reset time slot when date changes
+                  }}
+                >
+                  <div className="date-icon">
+                    <Calendar size={16} />
+                  </div>
+                  <div className="date-details">
+                    <h3>{dayOption.day}</h3>
+                    <p>{dayOption.date}</p>
+                  </div>
+                  {selectedDate === dayOption.date && (
+                    <div className="date-check">
+                      <Check size={16} />
+                    </div>
+                  )}
+                </div>
+              ))}
+            </div>
+          </div>
+          
+          {/* Time Slot Selection */}
+          {selectedDate && (
+            <div className="delivery-section delivery-slots">
+              <h2>Time Slot</h2>
+              <div className="time-options">
+                {deliveryOptions[deliveryType].deliveryDays
+                  .find(day => day.date === selectedDate)
+                  ?.slots.map((slot, index) => (
+                    <div 
+                      key={index}
+                      className={`time-option ${selectedTimeSlot === slot ? "selected" : ""}`}
+                      onClick={() => setSelectedTimeSlot(slot)}
+                    >
+                      <p>{slot}</p>
+                      {selectedTimeSlot === slot && (
+                        <div className="time-check">
+                          <Check size={16} />
+                        </div>
+                      )}
+                    </div>
+                  ))}
+              </div>
+            </div>
+          )}
+        </div>
+        
+        <div className="delivery-sidebar">
+          {/* Order Summary */}
+          <div className="order-summary">
+            <h2>Order Summary</h2>
+            
+            <div className="cart-items">
+              {cartItems.map(item => (
+                <div key={item.id} className="cart-item">
+                  <div className="item-image">
+                    <img src={item.image} alt={item.name} />
+                  </div>
+                  <div className="item-details">
+                    <h3 className="item-name">{item.name}</h3>
+                    <div className="item-meta">
+                      <p className="item-quantity">Qty: {item.quantity}</p>
+                      <p className="item-price">${item.price.toFixed(2)}</p>
+                    </div>
+                  </div>
+                </div>
+              ))}
+            </div>
+            
+            <div className="summary-details">
+              <div className="summary-row">
+                <span>Subtotal</span>
+                <span>${subtotal.toFixed(2)}</span>
+              </div>
+              <div className="summary-row">
+                <span>Shipping</span>
+                <span>{deliveryFee === 0 ? "Free" : `$${deliveryFee.toFixed(2)}`}</span>
+              </div>
+              <div className="summary-row total">
+                <span>Total</span>
+                <span>${total.toFixed(2)}</span>
+              </div>
+            </div>
+            
+            <div className="delivery-info">
+              {selectedDate && selectedTimeSlot ? (
+                <div className="selected-delivery">
+                  <h3>Selected Delivery:</h3>
+                  <p>{deliveryOptions[deliveryType].title}</p>
+                  <p>{selectedDate} - {selectedTimeSlot}</p>
+                </div>
+              ) : (
+                <div className="delivery-prompt">
+                  <p>Please select a delivery date and time slot</p>
+                </div>
+              )}
+            </div>
+            
+            <button 
+              className="continue-button"
+              onClick={handleContinue}
+              disabled={!selectedDate || !selectedTimeSlot}
+            >
+              Continue to Payment
+            </button>
+            
+            <Link to="/cart" className="back-link">
+              Return to Cart
+            </Link>
+          </div>
+        </div>
+      </div>
+    </div>
+  );
+};
+
+export default withLayout(DeliveryPage);
\ No newline at end of file
diff --git a/src/routes/AppRouter.jsx b/src/routes/AppRouter.jsx
index 65ca8da9..916d0dac 100644
--- a/src/routes/AppRouter.jsx
+++ b/src/routes/AppRouter.jsx
@@ -5,6 +5,7 @@ import Product from '../features/products/Products.jsx';
 import Login from '../features/auth/login.jsx';
 import CartPage from '../features/cart/CartPage.jsx';
 import ProductPage from '../features/products/ProductPage.jsx';
+import Delivery from '../features/cart/Delivery.jsx';
 
 const AppRouter = () => {
     
@@ -14,6 +15,7 @@ const AppRouter = () => {
         <Route path="/" element={<LandingPage />} />
         <Route path='products' element={<Product></Product>}></Route>
         <Route path='login' element={<Login></Login>}></Route>
+        <Route path='Delivery' element={<Delivery></Delivery>}></Route>
         <Route path='cart' element={<CartPage></CartPage>}></Route>
         <Route path='product/:id' element={<ProductPage></ProductPage>}></Route>
       </Routes>
-- 
2.49.0.windows.1

