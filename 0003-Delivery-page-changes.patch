From 5e9a390bd8a6589695d1cb4a3460c3bde858a2c9 Mon Sep 17 00:00:00 2001
From: Shravani2015 <shravanijangam2015@gmail.com>
Date: Thu, 22 May 2025 23:18:17 -0400
Subject: [PATCH 3/3] Delivery page changes

---
 src/features/cart/Delivery.css | 727 +++++++++++++++++++++++++++++++--
 src/features/cart/Delivery.jsx | 474 ++++++++++++++-------
 src/routes/AppRouter.jsx       |   2 +
 3 files changed, 1015 insertions(+), 188 deletions(-)

diff --git a/src/features/cart/Delivery.css b/src/features/cart/Delivery.css
index 4a8fa0c1..d5396a57 100644
--- a/src/features/cart/Delivery.css
+++ b/src/features/cart/Delivery.css
@@ -332,24 +332,55 @@
 /* Order summary */
 .order-summary {
   background-color: white;
-  border-radius: 8px;
-  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
-  padding: 20px;
+  border-radius: 12px;
+  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
+  padding: 24px;
   position: sticky;
   top: 20px;
 }
 
+.order-summary-header {
+  margin-bottom: 18px;
+  padding-bottom: 12px;
+  border-bottom: 1px solid #f1f5f9;
+}
+
+.order-summary-header h2 {
+  font-size: 18px;
+  font-weight: 700;
+  color: #111827;
+  margin: 0;
+}
+
 .cart-order {
-  max-height: 300px;
+  max-height: 320px;
   overflow-y: auto;
-  margin-bottom: 16px;
-  padding-right: 6px;
+  margin-bottom: 20px;
+  padding-right: 8px;
+  /* Add custom scrollbar */
+  scrollbar-width: thin;
+  scrollbar-color: #cbd5e1 #f1f5f9;
+}
+
+.cart-order::-webkit-scrollbar {
+  width: 6px;
+}
+
+.cart-order::-webkit-scrollbar-track {
+  background: #f1f5f9;
+  border-radius: 10px;
+}
+
+.cart-order::-webkit-scrollbar-thumb {
+  background-color: #cbd5e1;
+  border-radius: 10px;
 }
 
 .cart-order .cart-item {
   display: flex;
-  padding: 12px 0;
-  border-bottom: 1px solid #e2e8f0;
+  padding: 14px 0;
+  border-bottom: 1px solid #f1f5f9;
+  position: relative;
 }
 
 .cart-item:last-child {
@@ -357,11 +388,12 @@
 }
 
 .item-image {
-  width: 60px;
-  height: 60px;
-  border-radius: 4px;
+  width: 70px;
+  height: 70px;
+  border-radius: 8px;
   overflow: hidden;
-  margin-right: 12px;
+  margin-right: 14px;
+  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
 }
 
 .item-image img {
@@ -370,110 +402,195 @@
   object-fit: cover;
 }
 
+.placeholder-image {
+  width: 70px;
+  height: 70px;
+  background-color: #f1f5f9;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  font-size: 24px;
+  font-weight: bold;
+  color: #94a3b8;
+  border-radius: 8px;
+}
+
 .item-details {
   flex: 1;
+  padding-top: 4px;
+  display: flex;
+  flex-direction: column;
+  justify-content: space-between;
 }
 
 .item-name {
-  font-size: 14px;
+  font-size: 15px;
   font-weight: 600;
   margin: 0 0 6px 0;
+  color: #1f2937;
+  line-height: 1.3;
 }
 
 .item-meta {
   display: flex;
   justify-content: space-between;
-  font-size: 13px;
+  font-size: 14px;
   color: #64748b;
+  margin-top: 2px;
 }
 
 .item-meta p {
   margin: 0;
 }
 
+.item-price {
+  font-weight: 600;
+  color: #475569;
+}
+
+.item-quantity {
+  display: inline-block;
+  background-color: #f1f5f9;
+  padding: 2px 8px;
+  border-radius: 12px;
+  font-size: 12px;
+  font-weight: 500;
+}
+
 .summary-details {
-  padding: 16px 0;
-  border-top: 1px solid #e2e8f0;
-  border-bottom: 1px solid #e2e8f0;
-  margin-bottom: 16px;
+  padding: 20px 0;
+  border-top: 1px solid #f1f5f9;
+  border-bottom: 1px solid #f1f5f9;
+  margin-bottom: 20px;
 }
 
 .summary-row {
   display: flex;
   justify-content: space-between;
-  margin-bottom: 8px;
-  font-size: 14px;
+  margin-bottom: 12px;
+  font-size: 15px;
+  color: #475569;
+}
+
+.summary-label {
+  font-weight: 500;
+}
+
+.summary-value {
+  font-weight: 600;
 }
 
 .summary-row.total {
-  font-size: 16px;
+  font-size: 18px;
   font-weight: 700;
-  color: #222;
-  margin-top: 12px;
-  padding-top: 12px;
+  color: #111827;
+  margin-top: 16px;
+  padding-top: 16px;
   border-top: 1px dashed #e2e8f0;
 }
 
+/* Delivery info section */
 .delivery-info {
-  background-color: #f8fafc;
-  border-radius: 6px;
-  padding: 12px;
-  margin-bottom: 16px;
+  background-color: #f0f7ff;
+  border-radius: 10px;
+  padding: 16px;
+  margin-bottom: 20px;
+  border-left: 4px solid #3b82f6;
+}
+
+.selected-delivery {
+  display: flex;
+  align-items: flex-start;
+  gap: 12px;
+}
+
+.delivery-info-icon {
+  color: #3b82f6;
+  margin-top: 3px;
+  flex-shrink: 0;
+}
+
+.delivery-details {
+  flex: 1;
 }
 
 .selected-delivery h3 {
-  font-size: 14px;
+  font-size: 15px;
   font-weight: 600;
-  margin: 0 0 6px 0;
+  margin: 0 0 8px 0;
+  color: #1e3a8a;
 }
 
 .selected-delivery p {
-  font-size: 13px;
-  margin: 2px 0;
-  color: #64748b;
+  font-size: 14px;
+  margin: 3px 0;
+  color: #475569;
+  line-height: 1.4;
+}
+
+.delivery-date {
+  font-weight: 600;
+  color: #334155;
 }
 
 .delivery-prompt {
-  font-size: 13px;
+  font-size: 14px;
   color: #64748b;
   text-align: center;
-  padding: 8px 0;
+  padding: 12px 0;
+  background-color: #fafafa;
+  border-radius: 8px;
+  margin-top: 16px;
+  border: 1px dashed #e2e8f0;
 }
 
 .continue-button {
   display: block;
   width: 100%;
-  padding: 12px 16px;
+  padding: 14px 16px;
   background-color: #000000;
   color: white;
   border: none;
-  border-radius: 6px;
+  border-radius: 10px;
   font-size: 16px;
   font-weight: 600;
   cursor: pointer;
-  transition: background-color 0.2s ease;
-  margin-bottom: 12px;
+  transition: all 0.3s ease;
+  margin-bottom: 14px;
+  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
 }
 
 .continue-button:hover {
-  background-color: #000000;
+  background-color: #111827;
+  transform: translateY(-2px);
+  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
+}
+
+.continue-button:active {
+  transform: translateY(0);
 }
 
 .continue-button:disabled {
   background-color: #94a3b8;
   cursor: not-allowed;
+  transform: none;
+  box-shadow: none;
 }
 
 .back-link {
   display: block;
   text-align: center;
-  color: #64748b;
+  color: #475569;
   font-size: 14px;
+  font-weight: 500;
   text-decoration: none;
+  padding: 8px 0;
+  margin-top: 4px;
+  transition: all 0.2s ease;
 }
 
 .back-link:hover {
-  color: #475569;
+  color: #000000;
   text-decoration: underline;
 }
 
@@ -506,6 +623,389 @@
   }
 }
 
+/* Payment Popup Styles */
+.payment-popup-overlay {
+  position: fixed;
+  top: 0;
+  left: 0;
+  right: 0;
+  bottom: 0;
+  background-color: rgba(0, 0, 0, 0.6);
+  display: flex;
+  justify-content: center;
+  align-items: center;
+  z-index: 1000;
+  backdrop-filter: blur(3px);
+}
+
+.payment-popup {
+  background-color: white;
+  border-radius: 14px;
+  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
+  width: 100%;
+  max-width: 550px;
+  max-height: 90vh;
+  overflow-y: auto;
+  padding: 28px;
+  animation: popupFadeIn 0.35s ease-out;
+}
+
+@keyframes popupFadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(30px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0);
+  }
+}
+
+.payment-popup-header {
+  display: flex;
+  justify-content: space-between;
+  align-items: center;
+  margin-bottom: 24px;
+  padding-bottom: 18px;
+  border-bottom: 1px solid #e2e8f0;
+}
+
+.payment-popup-header h2 {
+  margin: 0;
+  font-size: 22px;
+  font-weight: 700;
+  color: #111827;
+}
+
+.close-button {
+  background: none;
+  border: none;
+  cursor: pointer;
+  color: #64748b;
+  padding: 6px;
+  border-radius: 50%;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  transition: all 0.2s ease;
+}
+
+.close-button:hover {
+  background-color: #f1f5f9;
+  color: #1f2937;
+  transform: rotate(90deg);
+}
+
+/* Payment Methods */
+.payment-methods {
+  margin-bottom: 28px;
+}
+
+.payment-method {
+  display: flex;
+  align-items: center;
+  padding: 18px;
+  border: 2px solid #e2e8f0;
+  border-radius: 12px;
+  cursor: pointer;
+  position: relative;
+  transition: all 0.25s ease;
+  margin-bottom: 14px;
+  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.02);
+}
+
+.payment-method:hover {
+  border-color: #cbd5e1;
+  background-color: #f8fafc;
+  transform: translateY(-2px);
+  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
+}
+
+.payment-method.selected {
+  border-color: #000000;
+  background-color: #f0f7ff;
+}
+
+.method-icon {
+  width: 42px;
+  height: 42px;
+  background-color: #f1f5f9;
+  border-radius: 10px;
+  color: #64748b;
+  margin-right: 18px;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  font-size: 20px;
+}
+
+.payment-method.selected .method-icon {
+  background-color: #dbeafe;
+  color: #0f172a;
+}
+
+.method-details {
+  flex: 1;
+}
+
+.method-details h3 {
+  font-size: 16px;
+  font-weight: 600;
+  margin: 0 0 2px 0;
+  color: #1f2937;
+}
+
+.method-details p {
+  font-size: 14px;
+  color: #64748b;
+  margin: 2px 0 0 0;
+}
+
+.method-check {
+  width: 22px;
+  height: 22px;
+  border-radius: 50%;
+  border: 2px solid #cbd5e1;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  transition: all 0.2s ease;
+}
+
+.payment-method.selected .method-check {
+  background-color: #000000;
+  border-color: #000000;
+  color: white;
+}
+
+/* Credit card badge */
+.payment-badge {
+  position: absolute;
+  top: -8px;
+  right: 15px;
+  padding: 4px 10px;
+  background-color: #10b981;
+  color: white;
+  font-size: 11px;
+  font-weight: 600;
+  border-radius: 12px;
+  box-shadow: 0 2px 4px rgba(16, 185, 129, 0.2);
+}
+
+/* Payment Form */
+.payment-form {
+  animation: fadeIn 0.4s ease-in-out;
+  padding: 20px;
+  background-color: #fafafa;
+  border-radius: 10px;
+  margin-top: 10px;
+  margin-bottom: 20px;
+  border: 1px solid #e5e7eb;
+}
+
+@keyframes fadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(10px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0);
+  }
+}
+
+.form-group {
+  margin-bottom: 20px;
+}
+
+.form-group label {
+  display: block;
+  font-size: 14px;
+  font-weight: 600;
+  margin-bottom: 8px;
+  color: #374151;
+}
+
+.form-group input {
+  width: 100%;
+  padding: 14px;
+  border: 1px solid #cbd5e1;
+  border-radius: 8px;
+  font-size: 15px;
+  transition: all 0.25s ease;
+  background-color: white;
+}
+
+.form-group input:focus {
+  outline: none;
+  border-color: #000000;
+  box-shadow: 0 0 0 3px rgba(0, 0, 0, 0.1);
+}
+
+.form-group input::placeholder {
+  color: #94a3b8;
+}
+
+.form-row {
+  display: flex;
+  gap: 20px;
+}
+
+.form-group.half {
+  flex: 1;
+}
+
+/* Credit card icons */
+.card-icons {
+  display: flex;
+  gap: 10px;
+  margin-top: 5px;
+}
+
+.card-icon {
+  width: 40px;
+  height: 25px;
+  background-color: #f8fafc;
+  border-radius: 4px;
+  border: 1px solid #e2e8f0;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  opacity: 0.7;
+  transition: all 0.2s ease;
+}
+
+.card-icon.active {
+  opacity: 1;
+  border-color: #94a3b8;
+}
+
+/* Security note */
+.security-note {
+  display: flex;
+  align-items: center;
+  gap: 10px;
+  padding: 12px;
+  background-color: #f1f5f9;
+  border-radius: 8px;
+  margin-bottom: 20px;
+}
+
+.security-icon {
+  color: #64748b;
+}
+
+.security-text {
+  font-size: 13px;
+  color: #475569;
+}
+
+.order-total {
+  display: flex;
+  justify-content: space-between;
+  align-items: center;
+  margin: 28px 0;
+  padding: 18px;
+  background-color: #f8fafc;
+  border-radius: 10px;
+  border: 1px dashed #cbd5e1;
+}
+
+.total-label {
+  font-size: 16px;
+  font-weight: 500;
+  color: #475569;
+}
+
+.total-value {
+  font-size: 20px;
+  font-weight: 700;
+  color: #000000;
+}
+
+.place-order-button {
+  display: block;
+  width: 100%;
+  padding: 16px;
+  background-color: #000000;
+  color: white;
+  border: none;
+  border-radius: 10px;
+  font-size: 16px;
+  font-weight: 600;
+  cursor: pointer;
+  transition: all 0.3s ease;
+  position: relative;
+  overflow: hidden;
+  margin-bottom: 16px;
+}
+
+.place-order-button:hover {
+  background-color: #111827;
+  transform: translateY(-2px);
+  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
+}
+
+.place-order-button:active {
+  transform: translateY(0);
+}
+
+.place-order-button:disabled {
+  background-color: #94a3b8;
+  cursor: not-allowed;
+  transform: none;
+  box-shadow: none;
+}
+
+.place-order-button::after {
+  content: "";
+  position: absolute;
+  top: 50%;
+  left: 50%;
+  width: 5px;
+  height: 5px;
+  background: rgba(255, 255, 255, 0.5);
+  opacity: 0;
+  border-radius: 100%;
+  transform: scale(1, 1) translate(-50%);
+  transform-origin: 50% 50%;
+}
+
+.place-order-button:focus:not(:active)::after {
+  animation: ripple 1s ease-out;
+}
+
+@keyframes ripple {
+  0% {
+    transform: scale(0, 0);
+    opacity: 0.5;
+  }
+  20% {
+    transform: scale(25, 25);
+    opacity: 0.3;
+  }
+  100% {
+    opacity: 0;
+    transform: scale(40, 40);
+  }
+}
+
+/* Secure payment badge */
+.secure-payment {
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  gap: 8px;
+  font-size: 14px;
+  color: #64748b;
+  margin-bottom: 8px;
+}
+
+.secure-icon {
+  width: 16px;
+  height: 16px;
+}
+
 /* Responsive styles */
 @media (max-width: 900px) {
   .delivery-content {
@@ -519,6 +1019,12 @@
   .checkout-steps {
     padding: 0;
   }
+  
+  .payment-popup {
+    width: 90%;
+    max-width: 90%;
+    padding: 20px;
+  }
 }
 
 @media (max-width: 600px) {
@@ -526,4 +1032,141 @@
   .time-options {
     grid-template-columns: 1fr;
   }
+  
+  .form-row {
+    flex-direction: column;
+    gap: 16px;
+  }
+  
+  .payment-popup {
+    padding: 16px;
+    border-radius: 12px;
+  }
+  
+  .payment-method {
+    padding: 14px;
+  }
+  
+  .method-icon {
+    width: 36px;
+    height: 36px;
+    margin-right: 14px;
+  }
+  
+  .place-order-button {
+    padding: 14px;
+  }
+}
+
+
+/* Delivery Summary Card Styles */
+.delivery-summary-card {
+  background-color: #f9f9f9;
+  border-radius: 8px;
+  padding: 1.5rem;
+  margin-bottom: 2rem;
+  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
+  border: 1px solid #eaeaea;
+}
+
+.delivery-summary-card h2 {
+  font-size: 1.25rem;
+  margin-bottom: 1.25rem;
+  border-bottom: 1px solid #eaeaea;
+  padding-bottom: 0.75rem;
+  color: #333;
+}
+
+.delivery-summary-content {
+  display: flex;
+  flex-direction: column;
+  gap: 1rem;
+}
+
+.delivery-summary-row {
+  display: flex;
+  align-items: flex-start;
+  gap: 1rem;
+}
+
+.summary-icon {
+  width: 32px;
+  height: 32px;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  background-color: #f0f0f0;
+  border-radius: 50%;
+  color: #555;
+  flex-shrink: 0;
+}
+
+.summary-detail {
+  display: flex;
+  flex-direction: column;
+  flex-grow: 1;
+}
+
+.detail-label {
+  font-size: 0.85rem;
+  color: #666;
+  margin-bottom: 0.25rem;
+}
+
+.detail-value {
+  font-weight: 500;
+  color: #333;
+  font-size: 1rem;
+  line-height: 1.4;
+}
+
+.address-detail .detail-value {
+  max-width: 100%;
+  line-height: 1.5;
+}
+
+/* Back Button Styles */
+.back-button {
+  display: flex;
+  align-items: center;
+  gap: 0.5rem;
+  background-color: #f0f0f0;
+  color: #333;
+  border: 1px solid #ddd;
+  padding: 0.75rem 1.25rem;
+  border-radius: 4px;
+  font-weight: 500;
+  transition: all 0.2s ease;
+  cursor: pointer;
+}
+
+.back-button:hover {
+  background-color: #e5e5e5;
+  border-color: #ccc;
+}
+
+.button-group {
+  display: flex;
+  justify-content: space-between;
+  margin-top: 2rem;
+}
+
+.place-order-button {
+  background-color: #4a6cf7;
+  color: white;
+  padding: 0.75rem 1.5rem;
+  border: none;
+  border-radius: 4px;
+  font-weight: 500;
+  cursor: pointer;
+  transition: background-color 0.2s ease;
+}
+
+.place-order-button:hover {
+  background-color: #3a5ce5;
+}
+
+.place-order-button:disabled {
+  background-color: #a0b0f8;
+  cursor: not-allowed;
 }
\ No newline at end of file
diff --git a/src/features/cart/Delivery.jsx b/src/features/cart/Delivery.jsx
index aa7b8804..ae8059bc 100644
--- a/src/features/cart/Delivery.jsx
+++ b/src/features/cart/Delivery.jsx
@@ -1,18 +1,24 @@
 import React, { useState, useEffect } from 'react';
-import { Link, useNavigate } from 'react-router-dom';
-import { Calendar, Clock, Truck, Check, User, MapPin, ShoppingBag } from 'lucide-react';
+import { Link } from 'react-router-dom';
+import { Calendar, Clock, Truck, Check, MapPin, CreditCard, ArrowLeft } from 'lucide-react';
 import withLayout from '../../layouts/HOC/withLayout';
 import './Delivery.css';
-import { useCart } from '../../context/CartContext'; // Import the useCart hook
+import { useCart } from '../../context/CartContext';
 
 const DeliveryPage = () => {
-  const { cart } = useCart(); // Use the useCart hook to access cart state
+  const { cart } = useCart();
   const [deliveryType, setDeliveryType] = useState("standard");
   const [selectedDate, setSelectedDate] = useState(null);
   const [selectedTimeSlot, setSelectedTimeSlot] = useState(null);
   const [isLoading, setIsLoading] = useState(true);
   const [deliveryOptions, setDeliveryOptions] = useState({});
-  const navigate = useNavigate();
+  const [paymentMethod, setPaymentMethod] = useState(null);
+  const [cardNumber, setCardNumber] = useState('');
+  const [cardName, setCardName] = useState('');
+  const [expiryDate, setExpiryDate] = useState('');
+  const [cvv, setCvv] = useState('');
+  const [isProcessing, setIsProcessing] = useState(false);
+  const [currentStep, setCurrentStep] = useState('delivery'); // 'delivery' or 'payment'
 
   const taxRate = 0.10;
   const taxAmount = cart.total * taxRate;
@@ -142,18 +148,43 @@ const DeliveryPage = () => {
       return;
     }
 
-    // In a real app, you would likely save delivery options along with the cart data
-    console.log({
-      deliveryType,
-      selectedDate,
-      selectedTimeSlot,
-      cost: deliveryOptions[deliveryType].price,
-      cartItems: cart.items
-    });
+    // Move to payment step instead of showing popup
+    setCurrentStep('payment');
+    setPaymentMethod('card'); // Default to card payment
+  };
+
+  const handlePaymentMethodSelect = (method) => {
+    setPaymentMethod(method);
+  };
+
+  const handlePaymentSubmit = (e) => {
+    e.preventDefault();
+    
+    // Simulate payment processing
+    setIsProcessing(true);
+    
+    setTimeout(() => {
+      setIsProcessing(false);
+      // Navigate to confirmation page or show confirmation message
+      window.location.href = '/confirmation';
+    }, 2000);
+  };
+
+  const handleBackToDelivery = () => {
+    setCurrentStep('delivery');
+  };
 
-    navigate('/payments');
-    // Optionally, you could pass delivery details to the payments page via state
-    // navigate('/payments', { state: { deliveryDetails: { deliveryType, selectedDate, selectedTimeSlot, cost: deliveryOptions[deliveryType].price } } });
+  // Helper function to get proper image URL
+  const getImageUrl = (item) => {
+    // Check for all possible image URL properties based on the product structure in ProductGrid
+    if (item.image) return item.image;
+    if (item.imageUrl) return item.imageUrl;
+    if (item.productImage) return item.productImage;
+    // Check for product property which may contain the image URL (used when product object is nested)
+    if (item.product && item.product.imageUrl) return item.product.imageUrl;
+    
+    // If no image is available, return null
+    return null;
   };
 
   if (isLoading) {
@@ -175,12 +206,12 @@ const DeliveryPage = () => {
           <div className="step-label">Cart</div>
         </div>
         <div className="step-divider"></div>
-        <div className="step active">
+        <div className={`step ${currentStep === 'delivery' ? 'active' : 'completed'}`}>
           <div className="step-number">2</div>
           <div className="step-label">Delivery</div>
         </div>
         <div className="step-divider"></div>
-        <div className="step">
+        <div className={`step ${currentStep === 'payment' ? 'active' : ''}`}>
           <div className="step-number">3</div>
           <div className="step-label">Payment</div>
         </div>
@@ -191,130 +222,277 @@ const DeliveryPage = () => {
         </div>
       </div>
 
-      <h1>Select Delivery Options</h1>
+      <h1>{currentStep === 'delivery' ? 'Select Delivery Options' : 'Payment Information'}</h1>
 
       <div className="delivery-content">
         <div className="delivery-main">
-          {/* Delivery Address Summary */}
-          <div className="delivery-section delivery-address">
-            <div className="section-header">
-              <h2>Delivery Address</h2>
-              <Link to="/addresses" className="change-link">Change</Link>
-            </div>
-            <div className="address-details">
-              <div className="address-icon">
-                <MapPin size={20} />
-              </div>
-              <div className="address-info">
-                <p className="address-name">John Doe</p>
-                <p className="address-line">123 Main Street, Apt 4B</p>
-                <p className="address-line">New York, NY 10001</p>
-                <p className="address-line">United States</p>
-                <p className="address-phone">+1 (555) 123-4567</p>
-              </div>
-            </div>
-          </div>
-
-          {/* Delivery Type Selection */}
-          <div className="delivery-section delivery-options">
-            <h2>Delivery Method</h2>
-            <div className="delivery-types">
-              <div
-                className={`delivery-option ${deliveryType === "standard" ? "selected" : ""}`}
-                onClick={() => setDeliveryType("standard")}
-              >
-                <div className="option-icon">
-                  <Truck size={20} />
+          {currentStep === 'delivery' ? (
+            <>
+              {/* Delivery Address Summary */}
+              <div className="delivery-section delivery-address">
+                <div className="section-header">
+                  <h2>Delivery Address</h2>
+                  <Link to="/addresses" className="change-link">Change</Link>
                 </div>
-                <div className="option-details">
-                  <h3>Standard Delivery</h3>
-                  <p>Delivery within 5 days</p>
-                </div>
-                <div className="option-price">
-                  <span>Free</span>
-                </div>
-                {deliveryType === "standard" && (
-                  <div className="option-check">
-                    <Check size={16} />
+                <div className="address-details">
+                  <div className="address-icon">
+                    <MapPin size={20} />
                   </div>
-                )}
-              </div>
-
-              <div
-                className={`delivery-option ${deliveryType === "express" ? "selected" : ""}`}
-                onClick={() => setDeliveryType("express")}
-              >
-                <div className="option-icon">
-                  <Clock size={20} />
-                </div>
-                <div className="option-details">
-                  <h3>Express Delivery</h3>
-                  <p>Get it within 3 days</p>
-                </div>
-                <div className="option-price">
-                  <span>${deliveryOptions.express?.price.toFixed(2)}</span>
-                </div>
-                {deliveryType === "express" && (
-                  <div className="option-check">
-                    <Check size={16} />
+                  <div className="address-info">
+                    <p className="address-name">John Doe</p>
+                    <p className="address-line">123 Main Street, Apt 4B</p>
+                    <p className="address-line">New York, NY 10001</p>
+                    <p className="address-line">United States</p>
+                    <p className="address-phone">+1 (555) 123-4567</p>
                   </div>
-                )}
+                </div>
               </div>
-            </div>
-          </div>
 
-          {/* Date Selection */}
-          <div className="delivery-section delivery-dates">
-            <h2>Delivery Date</h2>
-            <div className="date-options">
-              {deliveryOptions[deliveryType]?.deliveryDays.map((dayOption, index) => (
-                <div
-                  key={index}
-                  className={`date-option ${selectedDate === dayOption.date ? "selected" : ""}`}
-                  onClick={() => {
-                    setSelectedDate(dayOption.date);
-                    setSelectedTimeSlot(null); // Reset time slot when date changes
-                  }}
-                >
-                  <div className="date-icon">
-                    <Calendar size={16} />
-                  </div>
-                  <div className="date-details">
-                    <h3>{dayOption.day}</h3>
-                    <p>{dayOption.date}</p>
+              {/* Delivery Type Selection */}
+              <div className="delivery-section delivery-options">
+                <h2>Delivery Method</h2>
+                <div className="delivery-types">
+                  <div
+                    className={`delivery-option ${deliveryType === "standard" ? "selected" : ""}`}
+                    onClick={() => setDeliveryType("standard")}
+                  >
+                    <div className="option-icon">
+                      <Truck size={20} />
+                    </div>
+                    <div className="option-details">
+                      <h3>Standard Delivery</h3>
+                      <p>Delivery within 5 days</p>
+                    </div>
+                    <div className="option-price">
+                      <span>Free</span>
+                    </div>
+                    {deliveryType === "standard" && (
+                      <div className="option-check">
+                        <Check size={16} />
+                      </div>
+                    )}
                   </div>
-                  {selectedDate === dayOption.date && (
-                    <div className="date-check">
-                      <Check size={16} />
+
+                  <div
+                    className={`delivery-option ${deliveryType === "express" ? "selected" : ""}`}
+                    onClick={() => setDeliveryType("express")}
+                  >
+                    <div className="option-icon">
+                      <Clock size={20} />
                     </div>
-                  )}
+                    <div className="option-details">
+                      <h3>Express Delivery</h3>
+                      <p>Get it within 3 days</p>
+                    </div>
+                    <div className="option-price">
+                      <span>${deliveryOptions.express?.price.toFixed(2)}</span>
+                    </div>
+                    {deliveryType === "express" && (
+                      <div className="option-check">
+                        <Check size={16} />
+                      </div>
+                    )}
+                  </div>
                 </div>
-              ))}
-            </div>
-          </div>
+              </div>
 
-          {/* Time Slot Selection */}
-          {selectedDate && (
-            <div className="delivery-section delivery-slots">
-              <h2>Time Slot</h2>
-              <div className="time-options">
-                {deliveryOptions[deliveryType]?.deliveryDays
-                  .find(day => day.date === selectedDate)
-                  ?.slots.map((slot, index) => (
+              {/* Date Selection */}
+              <div className="delivery-section delivery-dates">
+                <h2>Delivery Date</h2>
+                <div className="date-options">
+                  {deliveryOptions[deliveryType]?.deliveryDays.map((dayOption, index) => (
                     <div
                       key={index}
-                      className={`time-option ${selectedTimeSlot === slot ? "selected" : ""}`}
-                      onClick={() => setSelectedTimeSlot(slot)}
+                      className={`date-option ${selectedDate === dayOption.date ? "selected" : ""}`}
+                      onClick={() => {
+                        setSelectedDate(dayOption.date);
+                        setSelectedTimeSlot(null); // Reset time slot when date changes
+                      }}
                     >
-                      <p>{slot}</p>
-                      {selectedTimeSlot === slot && (
-                        <div className="time-check">
+                      <div className="date-icon">
+                        <Calendar size={16} />
+                      </div>
+                      <div className="date-details">
+                        <h3>{dayOption.day}</h3>
+                        <p>{dayOption.date}</p>
+                      </div>
+                      {selectedDate === dayOption.date && (
+                        <div className="date-check">
                           <Check size={16} />
                         </div>
                       )}
                     </div>
                   ))}
+                </div>
+              </div>
+
+              {/* Time Slot Selection */}
+              {selectedDate && (
+                <div className="delivery-section delivery-slots">
+                  <h2>Time Slot</h2>
+                  <div className="time-options">
+                    {deliveryOptions[deliveryType]?.deliveryDays
+                      .find(day => day.date === selectedDate)
+                      ?.slots.map((slot, index) => (
+                        <div
+                          key={index}
+                          className={`time-option ${selectedTimeSlot === slot ? "selected" : ""}`}
+                          onClick={() => setSelectedTimeSlot(slot)}
+                        >
+                          <p>{slot}</p>
+                          {selectedTimeSlot === slot && (
+                            <div className="time-check">
+                              <Check size={16} />
+                            </div>
+                          )}
+                        </div>
+                      ))}
+                  </div>
+                </div>
+              )}
+            </>
+          ) : (
+            // Payment Section
+            <div className="payment-section">
+              {/* Updated Delivery Summary */}
+              <div className="delivery-summary-card">
+                <h2>Delivery Summary</h2>
+                <div className="delivery-summary-content">
+                  <div className="delivery-summary-row">
+                    <div className="summary-icon">
+                      {deliveryType === "express" ? <Clock size={18} /> : <Truck size={18} />}
+                    </div>
+                    <div className="summary-detail">
+                      <span className="detail-label">Method:</span>
+                      <span className="detail-value">{deliveryOptions[deliveryType]?.title}</span>
+                    </div>
+                  </div>
+                  
+                  <div className="delivery-summary-row">
+                    <div className="summary-icon">
+                      <Calendar size={18} />
+                    </div>
+                    <div className="summary-detail">
+                      <span className="detail-label">Date:</span>
+                      <span className="detail-value">{selectedDate}</span>
+                    </div>
+                  </div>
+                  
+                  <div className="delivery-summary-row">
+                    <div className="summary-icon">
+                      <Clock size={18} />
+                    </div>
+                    <div className="summary-detail">
+                      <span className="detail-label">Time:</span>
+                      <span className="detail-value">{selectedTimeSlot}</span>
+                    </div>
+                  </div>
+                  
+                  <div className="delivery-summary-row">
+                    <div className="summary-icon">
+                      <MapPin size={18} />
+                    </div>
+                    <div className="summary-detail address-detail">
+                      <span className="detail-label">Address:</span>
+                      <span className="detail-value">123 Main Street, Apt 4B<br/>New York, NY 10001</span>
+                    </div>
+                  </div>
+                </div>
+              </div>
+              
+              <div className="payment-methods">
+                <h2>Select Payment Method</h2>
+                <div 
+                  className={`payment-method ${paymentMethod === 'card' ? 'selected' : ''}`}
+                  onClick={() => handlePaymentMethodSelect('card')}
+                >
+                  <div className="method-icon">
+                    <CreditCard size={24} />
+                  </div>
+                  <div className="method-details">
+                    <h3>Credit / Debit Card</h3>
+                  </div>
+                  {paymentMethod === 'card' && (
+                    <div className="method-check">
+                      <Check size={16} />
+                    </div>
+                  )}
+                </div>
               </div>
+              
+              {paymentMethod === 'card' && (
+                <form className="payment-form" onSubmit={handlePaymentSubmit}>
+                  <div className="form-group">
+                    <label htmlFor="card-number">Card Number</label>
+                    <input 
+                      type="text" 
+                      id="card-number" 
+                      placeholder="1234 5678 9012 3456" 
+                      value={cardNumber}
+                      onChange={(e) => setCardNumber(e.target.value)}
+                      required
+                    />
+                  </div>
+                  
+                  <div className="form-group">
+                    <label htmlFor="card-name">Cardholder Name</label>
+                    <input 
+                      type="text" 
+                      id="card-name" 
+                      placeholder="John Doe" 
+                      value={cardName}
+                      onChange={(e) => setCardName(e.target.value)}
+                      required
+                    />
+                  </div>
+                  
+                  <div className="form-row">
+                    <div className="form-group half">
+                      <label htmlFor="expiry-date">Expiry Date</label>
+                      <input 
+                        type="text" 
+                        id="expiry-date" 
+                        placeholder="MM/YY" 
+                        value={expiryDate}
+                        onChange={(e) => setExpiryDate(e.target.value)}
+                        required
+                      />
+                    </div>
+                    
+                    <div className="form-group half">
+                      <label htmlFor="cvv">CVV</label>
+                      <input 
+                        type="text" 
+                        id="cvv" 
+                        placeholder="123" 
+                        value={cvv}
+                        onChange={(e) => setCvv(e.target.value)}
+                        required
+                      />
+                    </div>
+                  </div>
+                  
+                  <div className="button-group">
+                    {/* Updated Back to Delivery Button */}
+                    <button 
+                      type="button" 
+                      className="back-button"
+                      onClick={handleBackToDelivery}
+                    >
+                      <ArrowLeft size={16} />
+                      <span>Back</span>
+                    </button>
+                    
+                    <button 
+                      type="submit" 
+                      className="place-order-button"
+                      disabled={isProcessing}
+                    >
+                      {isProcessing ? 'Processing...' : 'Place Order'}
+                    </button>
+                  </div>
+                </form>
+              )}
             </div>
           )}
         </div>
@@ -328,8 +506,8 @@ const DeliveryPage = () => {
               {cart.items.map(item => (
                 <div key={item.id} className="cart-item">
                   <div className="item-image">
-                    {item.imageUrl ? (
-                      <img src={item.imageUrl} alt={item.name} />
+                    {getImageUrl(item) ? (
+                      <img src={getImageUrl(item)} alt={item.name} />
                     ) : (
                       <div className="placeholder-image">{item.name.charAt(0)}</div>
                     )}
@@ -338,7 +516,7 @@ const DeliveryPage = () => {
                     <h3 className="item-name">{item.name}</h3>
                     <div className="item-meta">
                       <p className="item-quantity">Qty: {item.quantity}</p>
-                      <p className="item-price">{item.price}</p>
+                      <p className="item-price">${typeof item.price === 'number' ? item.price.toFixed(2) : item.price}</p>
                     </div>
                   </div>
                 </div>
@@ -364,31 +542,35 @@ const DeliveryPage = () => {
               </div>
             </div>
 
-            <div className="delivery-info">
-              {selectedDate && selectedTimeSlot ? (
-                <div className="selected-delivery">
-                  <h3>Selected Delivery:</h3>
-                  <p>{deliveryOptions[deliveryType]?.title}</p>
-                  <p>{selectedDate} - {selectedTimeSlot}</p>
-                </div>
-              ) : (
-                <div className="delivery-prompt">
-                  <p>Please select a delivery date and time slot</p>
+            {currentStep === 'delivery' && (
+              <>
+                <div className="delivery-info">
+                  {selectedDate && selectedTimeSlot ? (
+                    <div className="selected-delivery">
+                      <h3>Selected Delivery:</h3>
+                      <p>{deliveryOptions[deliveryType]?.title}</p>
+                      <p>{selectedDate} - {selectedTimeSlot}</p>
+                    </div>
+                  ) : (
+                    <div className="delivery-prompt">
+                      <p>Please select a delivery date and time slot</p>
+                    </div>
+                  )}
                 </div>
-              )}
-            </div>
 
-            <button
-              className="continue-button"
-              onClick={handleContinue}
-              disabled={!selectedDate || !selectedTimeSlot}
-            >
-              Continue to Payment
-            </button>
+                <button
+                  className="continue-button"
+                  onClick={handleContinue}
+                  disabled={!selectedDate || !selectedTimeSlot}
+                >
+                  Continue to Payment
+                </button>
 
-            <Link to="/cart" className="back-link">
-              Return to Cart
-            </Link>
+                <Link to="/cart" className="back-link">
+                  Return to Cart
+                </Link>
+              </>
+            )}
           </div>
         </div>
       </div>
diff --git a/src/routes/AppRouter.jsx b/src/routes/AppRouter.jsx
index 916d0dac..b119493c 100644
--- a/src/routes/AppRouter.jsx
+++ b/src/routes/AppRouter.jsx
@@ -6,6 +6,7 @@ import Login from '../features/auth/login.jsx';
 import CartPage from '../features/cart/CartPage.jsx';
 import ProductPage from '../features/products/ProductPage.jsx';
 import Delivery from '../features/cart/Delivery.jsx';
+import PaymentPage from '../features/cart/Payments.jsx';
 
 const AppRouter = () => {
     
@@ -17,6 +18,7 @@ const AppRouter = () => {
         <Route path='login' element={<Login></Login>}></Route>
         <Route path='Delivery' element={<Delivery></Delivery>}></Route>
         <Route path='cart' element={<CartPage></CartPage>}></Route>
+        <Route path='payments' element={<PaymentPage></PaymentPage>}></Route>
         <Route path='product/:id' element={<ProductPage></ProductPage>}></Route>
       </Routes>
     </Router>
-- 
2.49.0.windows.1

